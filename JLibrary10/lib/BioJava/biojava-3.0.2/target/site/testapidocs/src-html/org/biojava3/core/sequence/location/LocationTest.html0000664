<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>package org.biojava3.core.sequence.location;<a name="line.1"></a>
<span class="sourceLineNo">002</span><a name="line.2"></a>
<span class="sourceLineNo">003</span>import static org.biojava3.core.sequence.Strand.UNDEFINED;<a name="line.3"></a>
<span class="sourceLineNo">004</span>import static org.junit.Assert.assertEquals;<a name="line.4"></a>
<span class="sourceLineNo">005</span><a name="line.5"></a>
<span class="sourceLineNo">006</span>import java.util.Arrays;<a name="line.6"></a>
<span class="sourceLineNo">007</span>import java.util.List;<a name="line.7"></a>
<span class="sourceLineNo">008</span>import org.biojava3.core.sequence.DNASequence;<a name="line.8"></a>
<span class="sourceLineNo">009</span><a name="line.9"></a>
<span class="sourceLineNo">010</span>import org.biojava3.core.sequence.Strand;<a name="line.10"></a>
<span class="sourceLineNo">011</span>import org.biojava3.core.sequence.compound.NucleotideCompound;<a name="line.11"></a>
<span class="sourceLineNo">012</span>import org.biojava3.core.sequence.location.template.Location;<a name="line.12"></a>
<span class="sourceLineNo">013</span>import org.biojava3.core.sequence.template.Sequence;<a name="line.13"></a>
<span class="sourceLineNo">014</span>import org.junit.Test;<a name="line.14"></a>
<span class="sourceLineNo">015</span><a name="line.15"></a>
<span class="sourceLineNo">016</span>public class LocationTest {<a name="line.16"></a>
<span class="sourceLineNo">017</span><a name="line.17"></a>
<span class="sourceLineNo">018</span>    @Test<a name="line.18"></a>
<span class="sourceLineNo">019</span>    public void testSubLocations() {<a name="line.19"></a>
<span class="sourceLineNo">020</span>        List&lt;SimpleLocation&gt; expected = Arrays.asList(<a name="line.20"></a>
<span class="sourceLineNo">021</span>                new SimpleLocation(1, 2, Strand.UNDEFINED),<a name="line.21"></a>
<span class="sourceLineNo">022</span>                new SimpleLocation(3, 6, Strand.UNDEFINED),<a name="line.22"></a>
<span class="sourceLineNo">023</span>                new SimpleLocation(7, 10, Strand.UNDEFINED),<a name="line.23"></a>
<span class="sourceLineNo">024</span>                new SimpleLocation(11, 20, UNDEFINED));<a name="line.24"></a>
<span class="sourceLineNo">025</span><a name="line.25"></a>
<span class="sourceLineNo">026</span>        Location location = new SimpleLocation(1, 20, UNDEFINED,<a name="line.26"></a>
<span class="sourceLineNo">027</span>                new SimpleLocation(1, 10, UNDEFINED,<a name="line.27"></a>
<span class="sourceLineNo">028</span>                new SimpleLocation(1, 6, UNDEFINED,<a name="line.28"></a>
<span class="sourceLineNo">029</span>                new SimpleLocation(1, 2, UNDEFINED), new SimpleLocation(3, 6, UNDEFINED)),<a name="line.29"></a>
<span class="sourceLineNo">030</span>                new SimpleLocation(7, 10, UNDEFINED)),<a name="line.30"></a>
<span class="sourceLineNo">031</span>                new SimpleLocation(11, 20, UNDEFINED));<a name="line.31"></a>
<span class="sourceLineNo">032</span><a name="line.32"></a>
<span class="sourceLineNo">033</span>        List&lt;Location&gt; actual = location.getRelevantSubLocations();<a name="line.33"></a>
<span class="sourceLineNo">034</span><a name="line.34"></a>
<span class="sourceLineNo">035</span>        assertEquals("Checking sublocations iterate as expected", toStr(expected), toStr(actual));<a name="line.35"></a>
<span class="sourceLineNo">036</span><a name="line.36"></a>
<span class="sourceLineNo">037</span>        String expectedDna = "AACCCCTTTTGGGGGGGGGG";<a name="line.37"></a>
<span class="sourceLineNo">038</span>        Sequence&lt;NucleotideCompound&gt; s = new DNASequence(expectedDna + "CC");<a name="line.38"></a>
<span class="sourceLineNo">039</span>        Sequence&lt;NucleotideCompound&gt; subSeq = location.getSubSequence(s);<a name="line.39"></a>
<span class="sourceLineNo">040</span>        assertEquals("Checking subseq as expected", expectedDna, subSeq.getSequenceAsString());<a name="line.40"></a>
<span class="sourceLineNo">041</span>    }<a name="line.41"></a>
<span class="sourceLineNo">042</span><a name="line.42"></a>
<span class="sourceLineNo">043</span>    @Test<a name="line.43"></a>
<span class="sourceLineNo">044</span>    public void testBasicCircularLocation() {<a name="line.44"></a>
<span class="sourceLineNo">045</span>        Location circularLocation = new SimpleLocation(<a name="line.45"></a>
<span class="sourceLineNo">046</span>                new SimplePoint(3), new SimplePoint(52), Strand.POSITIVE, true,<a name="line.46"></a>
<span class="sourceLineNo">047</span>                new SimpleLocation(3, 20, Strand.POSITIVE),<a name="line.47"></a>
<span class="sourceLineNo">048</span>                new SimpleLocation(1, 20, Strand.POSITIVE),<a name="line.48"></a>
<span class="sourceLineNo">049</span>                new SimpleLocation(1, 12, Strand.POSITIVE));<a name="line.49"></a>
<span class="sourceLineNo">050</span>        assertEquals("Checking length as expected", circularLocation.getLength(), 50);<a name="line.50"></a>
<span class="sourceLineNo">051</span><a name="line.51"></a>
<span class="sourceLineNo">052</span>        String expectedDna = "CCCCTTTTGGGGGGGGGGAACCCCTTTTGGGGGGGGGGAACCCCTTTTGG";<a name="line.52"></a>
<span class="sourceLineNo">053</span>        DNASequence s = new DNASequence("AACCCCTTTTGGGGGGGGGG");<a name="line.53"></a>
<span class="sourceLineNo">054</span>        Sequence&lt;NucleotideCompound&gt; subSeq = circularLocation.getSubSequence(s);<a name="line.54"></a>
<span class="sourceLineNo">055</span>        assertEquals("Checking subseq as expected", expectedDna, subSeq.getSequenceAsString());<a name="line.55"></a>
<span class="sourceLineNo">056</span><a name="line.56"></a>
<span class="sourceLineNo">057</span>    <a name="line.57"></a>
<span class="sourceLineNo">058</span>        Location newCircularLocation = Location.Tools.circularLocation(<a name="line.58"></a>
<span class="sourceLineNo">059</span>                3, 52, Strand.POSITIVE, 20);<a name="line.59"></a>
<span class="sourceLineNo">060</span>        //Check this is the right set of coords even to use!<a name="line.60"></a>
<span class="sourceLineNo">061</span>        Location negativeCoordsCircularLocation = Location.Tools.circularLocation(<a name="line.61"></a>
<span class="sourceLineNo">062</span>                58,9, Strand.POSITIVE, 20);<a name="line.62"></a>
<span class="sourceLineNo">063</span><a name="line.63"></a>
<span class="sourceLineNo">064</span>        assertEquals("location objects should be equivalent", circularLocation, newCircularLocation);<a name="line.64"></a>
<span class="sourceLineNo">065</span>        assertEquals("location objects should be equivalent even if they are on the wrong coord system", circularLocation.getSubLocations(), negativeCoordsCircularLocation.getSubLocations());<a name="line.65"></a>
<span class="sourceLineNo">066</span>        assertEquals("Checking subseq as expected", expectedDna,<a name="line.66"></a>
<span class="sourceLineNo">067</span>                newCircularLocation.getSubSequence(s).getSequenceAsString());<a name="line.67"></a>
<span class="sourceLineNo">068</span>    }<a name="line.68"></a>
<span class="sourceLineNo">069</span><a name="line.69"></a>
<span class="sourceLineNo">070</span>    @Test<a name="line.70"></a>
<span class="sourceLineNo">071</span>    public void testWithStrandSwitch() {<a name="line.71"></a>
<span class="sourceLineNo">072</span>        DNASequence s = new DNASequence("AAAAAAAAAATTTTTTTTTTCCCCCCCCCCGGGGGGGGGGAAATTTCCCG");<a name="line.72"></a>
<span class="sourceLineNo">073</span>        Location location = new SimpleLocation(1, 50, Strand.UNDEFINED,<a name="line.73"></a>
<span class="sourceLineNo">074</span>                new SimpleLocation(1, 10, Strand.POSITIVE), //AAAAAAAAAA<a name="line.74"></a>
<span class="sourceLineNo">075</span>                new SimpleLocation(19, 23, Strand.NEGATIVE), //GGGAA<a name="line.75"></a>
<span class="sourceLineNo">076</span>                new SimpleLocation(45, 50, Strand.POSITIVE)); //TTCCCG<a name="line.76"></a>
<span class="sourceLineNo">077</span>        String expectedDna = "AAAAAAAAAAGGGAATTCCCG";<a name="line.77"></a>
<span class="sourceLineNo">078</span>        Sequence&lt;NucleotideCompound&gt; subSeq = location.getRelevantSubSequence(s);<a name="line.78"></a>
<span class="sourceLineNo">079</span>        assertEquals("Checking subseq as expected", expectedDna, subSeq.getSequenceAsString());<a name="line.79"></a>
<span class="sourceLineNo">080</span>    }<a name="line.80"></a>
<span class="sourceLineNo">081</span><a name="line.81"></a>
<span class="sourceLineNo">082</span>    @Test<a name="line.82"></a>
<span class="sourceLineNo">083</span>    public void testStrandFlip() {<a name="line.83"></a>
<span class="sourceLineNo">084</span>        Location l = new SimpleLocation(3,17,Strand.POSITIVE);<a name="line.84"></a>
<span class="sourceLineNo">085</span>        Location r = Location.Tools.location(18, 4, Strand.POSITIVE, 20);<a name="line.85"></a>
<span class="sourceLineNo">086</span>        assertEquals("Locations should be the same even though they were expressed differently", l, r);<a name="line.86"></a>
<span class="sourceLineNo">087</span>    }<a name="line.87"></a>
<span class="sourceLineNo">088</span><a name="line.88"></a>
<span class="sourceLineNo">089</span>    @Test(expected = IllegalStateException.class)<a name="line.89"></a>
<span class="sourceLineNo">090</span>    public void badLocations() {<a name="line.90"></a>
<span class="sourceLineNo">091</span>        new SimpleLocation(10, 1, Strand.UNDEFINED);<a name="line.91"></a>
<span class="sourceLineNo">092</span>    }<a name="line.92"></a>
<span class="sourceLineNo">093</span><a name="line.93"></a>
<span class="sourceLineNo">094</span>    @Test<a name="line.94"></a>
<span class="sourceLineNo">095</span>    public void modulateCircular() {<a name="line.95"></a>
<span class="sourceLineNo">096</span>        int length = 20;<a name="line.96"></a>
<span class="sourceLineNo">097</span>        assertEquals("Checking modulation", 12, Location.Tools.modulateCircularIndex(52, length));<a name="line.97"></a>
<span class="sourceLineNo">098</span>        assertEquals("Checking modulation", 1, Location.Tools.modulateCircularIndex(21, length));<a name="line.98"></a>
<span class="sourceLineNo">099</span>        assertEquals("Checking modulation", 3, Location.Tools.modulateCircularIndex(3, length));<a name="line.99"></a>
<span class="sourceLineNo">100</span>    }<a name="line.100"></a>
<span class="sourceLineNo">101</span><a name="line.101"></a>
<span class="sourceLineNo">102</span>    @Test<a name="line.102"></a>
<span class="sourceLineNo">103</span>    public void completePasses() {<a name="line.103"></a>
<span class="sourceLineNo">104</span>        assertEquals("Checking passes", 4, Location.Tools.completeCircularPasses(52, 10));<a name="line.104"></a>
<span class="sourceLineNo">105</span>        assertEquals("Checking passes", 2, Location.Tools.completeCircularPasses(36, 10));<a name="line.105"></a>
<span class="sourceLineNo">106</span>    }<a name="line.106"></a>
<span class="sourceLineNo">107</span><a name="line.107"></a>
<span class="sourceLineNo">108</span>    private &lt;L extends Location&gt; String toStr(List&lt;L&gt; locations) {<a name="line.108"></a>
<span class="sourceLineNo">109</span>        StringBuilder sb = new StringBuilder();<a name="line.109"></a>
<span class="sourceLineNo">110</span>        for (L l : locations) {<a name="line.110"></a>
<span class="sourceLineNo">111</span>            sb.append(l).append("|");<a name="line.111"></a>
<span class="sourceLineNo">112</span>        }<a name="line.112"></a>
<span class="sourceLineNo">113</span>        return sb.toString();<a name="line.113"></a>
<span class="sourceLineNo">114</span>    }<a name="line.114"></a>
<span class="sourceLineNo">115</span>}<a name="line.115"></a>




























































</pre>
</div>
</body>
</html>
