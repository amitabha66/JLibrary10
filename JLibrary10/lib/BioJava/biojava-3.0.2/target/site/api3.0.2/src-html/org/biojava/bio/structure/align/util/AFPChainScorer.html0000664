<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> *                    BioJava development code<a name="line.2"></a>
<span class="sourceLineNo">003</span> *<a name="line.3"></a>
<span class="sourceLineNo">004</span> * This code may be freely distributed and modified under the<a name="line.4"></a>
<span class="sourceLineNo">005</span> * terms of the GNU Lesser General Public Licence.  This should<a name="line.5"></a>
<span class="sourceLineNo">006</span> * be distributed with the code.  If you do not have a copy,<a name="line.6"></a>
<span class="sourceLineNo">007</span> * see:<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.gnu.org/copyleft/lesser.html<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Copyright for this code is held jointly by the individual<a name="line.11"></a>
<span class="sourceLineNo">012</span> * authors.  These should be listed in @author doc comments.<a name="line.12"></a>
<span class="sourceLineNo">013</span> *<a name="line.13"></a>
<span class="sourceLineNo">014</span> * For more information on the BioJava project and its aims,<a name="line.14"></a>
<span class="sourceLineNo">015</span> * or to join the biojava-l mailing list, visit the home page<a name="line.15"></a>
<span class="sourceLineNo">016</span> * at:<a name="line.16"></a>
<span class="sourceLineNo">017</span> *<a name="line.17"></a>
<span class="sourceLineNo">018</span> *      http://www.biojava.org/<a name="line.18"></a>
<span class="sourceLineNo">019</span> *<a name="line.19"></a>
<span class="sourceLineNo">020</span> * Created on Apr 7, 2010<a name="line.20"></a>
<span class="sourceLineNo">021</span> * Author: Andreas Prlic <a name="line.21"></a>
<span class="sourceLineNo">022</span> *<a name="line.22"></a>
<span class="sourceLineNo">023</span> */<a name="line.23"></a>
<span class="sourceLineNo">024</span><a name="line.24"></a>
<span class="sourceLineNo">025</span>package org.biojava.bio.structure.align.util;<a name="line.25"></a>
<span class="sourceLineNo">026</span><a name="line.26"></a>
<span class="sourceLineNo">027</span>import org.biojava.bio.structure.Atom;<a name="line.27"></a>
<span class="sourceLineNo">028</span>import org.biojava.bio.structure.Calc;<a name="line.28"></a>
<span class="sourceLineNo">029</span>import org.biojava.bio.structure.SVDSuperimposer;<a name="line.29"></a>
<span class="sourceLineNo">030</span>import org.biojava.bio.structure.StructureException;<a name="line.30"></a>
<span class="sourceLineNo">031</span>import org.biojava.bio.structure.align.model.AFPChain;<a name="line.31"></a>
<span class="sourceLineNo">032</span>import org.biojava.bio.structure.jama.Matrix;<a name="line.32"></a>
<span class="sourceLineNo">033</span><a name="line.33"></a>
<span class="sourceLineNo">034</span>public class AFPChainScorer<a name="line.34"></a>
<span class="sourceLineNo">035</span>{<a name="line.35"></a>
<span class="sourceLineNo">036</span><a name="line.36"></a>
<span class="sourceLineNo">037</span>        public static double getTMScore(AFPChain align, Atom[] ca1, Atom[] ca2) throws StructureException<a name="line.37"></a>
<span class="sourceLineNo">038</span>        {<a name="line.38"></a>
<span class="sourceLineNo">039</span>                if ( align.getNrEQR() == 0)<a name="line.39"></a>
<span class="sourceLineNo">040</span>                        return -1;<a name="line.40"></a>
<span class="sourceLineNo">041</span><a name="line.41"></a>
<span class="sourceLineNo">042</span>                // Create new arrays for the subset of atoms in the alignment.<a name="line.42"></a>
<span class="sourceLineNo">043</span>                Atom[] ca1aligned = new Atom[align.getOptLength()];<a name="line.43"></a>
<span class="sourceLineNo">044</span>                Atom[] ca2aligned = new Atom[align.getOptLength()];<a name="line.44"></a>
<span class="sourceLineNo">045</span>                int pos=0;<a name="line.45"></a>
<span class="sourceLineNo">046</span>                int[] blockLens = align.getOptLen();<a name="line.46"></a>
<span class="sourceLineNo">047</span>                int[][][] optAln = align.getOptAln();<a name="line.47"></a>
<span class="sourceLineNo">048</span>                assert(align.getBlockNum() &lt;= optAln.length);<a name="line.48"></a>
<span class="sourceLineNo">049</span>                <a name="line.49"></a>
<span class="sourceLineNo">050</span>                for(int block=0;block&lt; align.getBlockNum();block++) {<a name="line.50"></a>
<span class="sourceLineNo">051</span>                <a name="line.51"></a>
<span class="sourceLineNo">052</span>                        if ( ! ( blockLens[block] &lt;= optAln[block][0].length)) {<a name="line.52"></a>
<span class="sourceLineNo">053</span>                                System.err.println("AFPChainScorer getTMScore: errors reconstructing alignment block ["+ block +"]. Length is " + blockLens[block] + " but should be &lt;=" + optAln[block][0].length );<a name="line.53"></a>
<span class="sourceLineNo">054</span>                        }<a name="line.54"></a>
<span class="sourceLineNo">055</span><a name="line.55"></a>
<span class="sourceLineNo">056</span>                        for(int i=0;i&lt;blockLens[block];i++) {<a name="line.56"></a>
<span class="sourceLineNo">057</span>                                Atom a1 = ca1[optAln[block][0][i]];<a name="line.57"></a>
<span class="sourceLineNo">058</span>                                Atom a2 = (Atom) ca2[optAln[block][1][i]].clone();<a name="line.58"></a>
<span class="sourceLineNo">059</span>                                                                <a name="line.59"></a>
<span class="sourceLineNo">060</span>                                ca1aligned[pos] = a1;<a name="line.60"></a>
<span class="sourceLineNo">061</span>                                ca2aligned[pos] = a2;<a name="line.61"></a>
<span class="sourceLineNo">062</span>                                pos++;<a name="line.62"></a>
<span class="sourceLineNo">063</span>                        }<a name="line.63"></a>
<span class="sourceLineNo">064</span>                }<a name="line.64"></a>
<span class="sourceLineNo">065</span>                <a name="line.65"></a>
<span class="sourceLineNo">066</span>                // this can happen when we load an old XML serialization which did not support modern ChemComp representation of modified residues.             <a name="line.66"></a>
<span class="sourceLineNo">067</span>                if ( pos != align.getOptLength()){<a name="line.67"></a>
<span class="sourceLineNo">068</span>                        System.err.println("AFPChainScorer getTMScore: Problems reconstructing alignment! nr of loaded atoms is " + pos + " but should be " + align.getOptLength());<a name="line.68"></a>
<span class="sourceLineNo">069</span>                        // we need to resize the array, because we allocated too many atoms earlier on.<a name="line.69"></a>
<span class="sourceLineNo">070</span>                        ca1aligned = (Atom[]) resizeArray(ca1aligned, pos);<a name="line.70"></a>
<span class="sourceLineNo">071</span>                        ca2aligned = (Atom[]) resizeArray(ca2aligned, pos);<a name="line.71"></a>
<span class="sourceLineNo">072</span>                }<a name="line.72"></a>
<span class="sourceLineNo">073</span>                //Superimpose<a name="line.73"></a>
<span class="sourceLineNo">074</span>                SVDSuperimposer svd = new SVDSuperimposer(ca1aligned, ca2aligned);<a name="line.74"></a>
<span class="sourceLineNo">075</span>                Matrix matrix = svd.getRotation();<a name="line.75"></a>
<span class="sourceLineNo">076</span>                Atom shift = svd.getTranslation();<a name="line.76"></a>
<span class="sourceLineNo">077</span><a name="line.77"></a>
<span class="sourceLineNo">078</span>                for(Atom a : ca2aligned) {<a name="line.78"></a>
<span class="sourceLineNo">079</span>                        Calc.rotate(a, matrix);<a name="line.79"></a>
<span class="sourceLineNo">080</span>                        Calc.shift(a, shift);<a name="line.80"></a>
<span class="sourceLineNo">081</span>                }<a name="line.81"></a>
<span class="sourceLineNo">082</span><a name="line.82"></a>
<span class="sourceLineNo">083</span>                return SVDSuperimposer.getTMScore(ca1aligned, ca2aligned, ca1.length, ca2.length);<a name="line.83"></a>
<span class="sourceLineNo">084</span><a name="line.84"></a>
<span class="sourceLineNo">085</span>        }<a name="line.85"></a>
<span class="sourceLineNo">086</span><a name="line.86"></a>
<span class="sourceLineNo">087</span>        /**<a name="line.87"></a>
<span class="sourceLineNo">088</span>         * Reallocates an array with a new size, and copies the contents<a name="line.88"></a>
<span class="sourceLineNo">089</span>         * of the old array to the new array.<a name="line.89"></a>
<span class="sourceLineNo">090</span>         * @param oldArray  the old array, to be reallocated.<a name="line.90"></a>
<span class="sourceLineNo">091</span>         * @param newSize   the new array size.<a name="line.91"></a>
<span class="sourceLineNo">092</span>         * @return          A new array with the same contents.<a name="line.92"></a>
<span class="sourceLineNo">093</span>         */<a name="line.93"></a>
<span class="sourceLineNo">094</span>        private static Object resizeArray (Object oldArray, int newSize) {<a name="line.94"></a>
<span class="sourceLineNo">095</span>                int oldSize = java.lang.reflect.Array.getLength(oldArray);<a name="line.95"></a>
<span class="sourceLineNo">096</span>                @SuppressWarnings("rawtypes")<a name="line.96"></a>
<span class="sourceLineNo">097</span>                Class elementType = oldArray.getClass().getComponentType();<a name="line.97"></a>
<span class="sourceLineNo">098</span>                Object newArray = java.lang.reflect.Array.newInstance(<a name="line.98"></a>
<span class="sourceLineNo">099</span>                                elementType,newSize);<a name="line.99"></a>
<span class="sourceLineNo">100</span>                int preserveLength = Math.min(oldSize,newSize);<a name="line.100"></a>
<span class="sourceLineNo">101</span>                if (preserveLength &gt; 0)<a name="line.101"></a>
<span class="sourceLineNo">102</span>                        System.arraycopy (oldArray,0,newArray,0,preserveLength);<a name="line.102"></a>
<span class="sourceLineNo">103</span>                return newArray; }<a name="line.103"></a>
<span class="sourceLineNo">104</span><a name="line.104"></a>
<span class="sourceLineNo">105</span>}<a name="line.105"></a>




























































</pre>
</div>
</body>
</html>
