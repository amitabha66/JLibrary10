<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> *                    BioJava development code<a name="line.2"></a>
<span class="sourceLineNo">003</span> *<a name="line.3"></a>
<span class="sourceLineNo">004</span> * This code may be freely distributed and modified under the<a name="line.4"></a>
<span class="sourceLineNo">005</span> * terms of the GNU Lesser General Public Licence.  This should<a name="line.5"></a>
<span class="sourceLineNo">006</span> * be distributed with the code.  If you do not have a copy,<a name="line.6"></a>
<span class="sourceLineNo">007</span> * see:<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.gnu.org/copyleft/lesser.html<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Copyright for this code is held jointly by the individual<a name="line.11"></a>
<span class="sourceLineNo">012</span> * authors.  These should be listed in @author doc comments.<a name="line.12"></a>
<span class="sourceLineNo">013</span> *<a name="line.13"></a>
<span class="sourceLineNo">014</span> * For more information on the BioJava project and its aims,<a name="line.14"></a>
<span class="sourceLineNo">015</span> * or to join the biojava-l mailing list, visit the home page<a name="line.15"></a>
<span class="sourceLineNo">016</span> * at:<a name="line.16"></a>
<span class="sourceLineNo">017</span> *<a name="line.17"></a>
<span class="sourceLineNo">018</span> *      http://www.biojava.org/<a name="line.18"></a>
<span class="sourceLineNo">019</span> *<a name="line.19"></a>
<span class="sourceLineNo">020</span> * <a name="line.20"></a>
<span class="sourceLineNo">021</span> * Author: Andreas Prlic <a name="line.21"></a>
<span class="sourceLineNo">022</span> *<a name="line.22"></a>
<span class="sourceLineNo">023</span> */<a name="line.23"></a>
<span class="sourceLineNo">024</span>package org.biojava.bio.structure.domain;<a name="line.24"></a>
<span class="sourceLineNo">025</span><a name="line.25"></a>
<span class="sourceLineNo">026</span>import java.util.List;<a name="line.26"></a>
<span class="sourceLineNo">027</span><a name="line.27"></a>
<span class="sourceLineNo">028</span>import org.biojava.bio.structure.Atom;<a name="line.28"></a>
<span class="sourceLineNo">029</span>import org.biojava.bio.structure.Chain;<a name="line.29"></a>
<span class="sourceLineNo">030</span>import org.biojava.bio.structure.ResidueNumber;<a name="line.30"></a>
<span class="sourceLineNo">031</span>import org.biojava.bio.structure.Structure;<a name="line.31"></a>
<span class="sourceLineNo">032</span>import org.biojava.bio.structure.StructureException;<a name="line.32"></a>
<span class="sourceLineNo">033</span>import org.biojava.bio.structure.StructureTools;<a name="line.33"></a>
<span class="sourceLineNo">034</span>import org.biojava.bio.structure.domain.pdp.ClusterDomains;<a name="line.34"></a>
<span class="sourceLineNo">035</span>import org.biojava.bio.structure.domain.pdp.CutDomain;<a name="line.35"></a>
<span class="sourceLineNo">036</span>import org.biojava.bio.structure.domain.pdp.CutSites;<a name="line.36"></a>
<span class="sourceLineNo">037</span>import org.biojava.bio.structure.domain.pdp.Domain;<a name="line.37"></a>
<span class="sourceLineNo">038</span>import org.biojava.bio.structure.domain.pdp.GetDistanceMatrix;<a name="line.38"></a>
<span class="sourceLineNo">039</span>import org.biojava.bio.structure.domain.pdp.PDPDistanceMatrix;<a name="line.39"></a>
<span class="sourceLineNo">040</span>import org.biojava.bio.structure.domain.pdp.ShortSegmentRemover;<a name="line.40"></a>
<span class="sourceLineNo">041</span><a name="line.41"></a>
<span class="sourceLineNo">042</span><a name="line.42"></a>
<span class="sourceLineNo">043</span>/** Protein Domain Parser is a an algorithm that attempts at assigning domains for 3D protein structures.<a name="line.43"></a>
<span class="sourceLineNo">044</span> * Since domains in proteins are difficult to define, results detected by automated algorithms have to be taken with a grain of salt.<a name="line.44"></a>
<span class="sourceLineNo">045</span> *<a name="line.45"></a>
<span class="sourceLineNo">046</span> *   see&lt;pre&gt;<a name="line.46"></a>
<span class="sourceLineNo">047</span>J Mol Biol. 2004 Jun 4;339(3):647-78.<a name="line.47"></a>
<span class="sourceLineNo">048</span><a name="line.48"></a>
<span class="sourceLineNo">049</span>Toward consistent assignment of structural domains in proteins.<a name="line.49"></a>
<span class="sourceLineNo">050</span><a name="line.50"></a>
<span class="sourceLineNo">051</span>Veretnik S, Bourne PE, Alexandrov NN, Shindyalov IN.<a name="line.51"></a>
<span class="sourceLineNo">052</span>&lt;/pre&gt;<a name="line.52"></a>
<span class="sourceLineNo">053</span><a name="line.53"></a>
<span class="sourceLineNo">054</span> * This implementation is based on a Java port of the PDP algorithm, as described in:<a name="line.54"></a>
<span class="sourceLineNo">055</span> *   <a name="line.55"></a>
<span class="sourceLineNo">056</span> * <a name="line.56"></a>
<span class="sourceLineNo">057</span> * @author Andreas Prlic<a name="line.57"></a>
<span class="sourceLineNo">058</span> * @since 3.0.2<a name="line.58"></a>
<span class="sourceLineNo">059</span> */<a name="line.59"></a>
<span class="sourceLineNo">060</span>public class LocalProteinDomainParser {<a name="line.60"></a>
<span class="sourceLineNo">061</span><a name="line.61"></a>
<span class="sourceLineNo">062</span><a name="line.62"></a>
<span class="sourceLineNo">063</span>        /** make sure this class can only get accessed via the static method calls<a name="line.63"></a>
<span class="sourceLineNo">064</span>         * <a name="line.64"></a>
<span class="sourceLineNo">065</span>         */<a name="line.65"></a>
<span class="sourceLineNo">066</span>        private LocalProteinDomainParser(){<a name="line.66"></a>
<span class="sourceLineNo">067</span>                <a name="line.67"></a>
<span class="sourceLineNo">068</span>        }<a name="line.68"></a>
<span class="sourceLineNo">069</span>        <a name="line.69"></a>
<span class="sourceLineNo">070</span>        /** Suggest domains for a protein structure<a name="line.70"></a>
<span class="sourceLineNo">071</span>         * <a name="line.71"></a>
<span class="sourceLineNo">072</span>         * @param s the protein structure<a name="line.72"></a>
<span class="sourceLineNo">073</span>         * @return a list of possible domains<a name="line.73"></a>
<span class="sourceLineNo">074</span>         * @throws StructureException<a name="line.74"></a>
<span class="sourceLineNo">075</span>         */<a name="line.75"></a>
<span class="sourceLineNo">076</span>        public static List&lt;Domain&gt; suggestDomains(Structure s) throws StructureException{<a name="line.76"></a>
<span class="sourceLineNo">077</span><a name="line.77"></a>
<span class="sourceLineNo">078</span>                Atom[] ca = StructureTools.getAtomCAArray(s);<a name="line.78"></a>
<span class="sourceLineNo">079</span><a name="line.79"></a>
<span class="sourceLineNo">080</span>                return suggestDomains(ca);<a name="line.80"></a>
<span class="sourceLineNo">081</span>        } <a name="line.81"></a>
<span class="sourceLineNo">082</span><a name="line.82"></a>
<span class="sourceLineNo">083</span><a name="line.83"></a>
<span class="sourceLineNo">084</span>        /** Suggest domains for a set of Calpha atoms<a name="line.84"></a>
<span class="sourceLineNo">085</span>         * <a name="line.85"></a>
<span class="sourceLineNo">086</span>         * @param ca an array of Calpha atoms<a name="line.86"></a>
<span class="sourceLineNo">087</span>         * @return a list of possible domains<a name="line.87"></a>
<span class="sourceLineNo">088</span>         * @throws StructureException<a name="line.88"></a>
<span class="sourceLineNo">089</span>         */<a name="line.89"></a>
<span class="sourceLineNo">090</span>        public static List&lt;Domain&gt; suggestDomains(Atom[] ca) throws StructureException{<a name="line.90"></a>
<span class="sourceLineNo">091</span><a name="line.91"></a>
<span class="sourceLineNo">092</span>                GetDistanceMatrix distMaxCalculator = new GetDistanceMatrix();<a name="line.92"></a>
<span class="sourceLineNo">093</span><a name="line.93"></a>
<span class="sourceLineNo">094</span>                PDPDistanceMatrix pdpMatrix = distMaxCalculator.getDistanceMatrix(ca);<a name="line.94"></a>
<span class="sourceLineNo">095</span><a name="line.95"></a>
<span class="sourceLineNo">096</span><a name="line.96"></a>
<span class="sourceLineNo">097</span><a name="line.97"></a>
<span class="sourceLineNo">098</span>                Domain dom = new Domain();<a name="line.98"></a>
<span class="sourceLineNo">099</span>                Chain c = ca[0].getGroup().getChain();<a name="line.99"></a>
<span class="sourceLineNo">100</span>                dom.setId("D"+c.getParent().getPDBCode()+c.getId()+"1");<a name="line.100"></a>
<span class="sourceLineNo">101</span>                dom.setSize(ca.length);<a name="line.101"></a>
<span class="sourceLineNo">102</span>                dom.setNseg(1);<a name="line.102"></a>
<span class="sourceLineNo">103</span>                dom.getSegmentAtPos(0).setFrom(0);<a name="line.103"></a>
<span class="sourceLineNo">104</span>                dom.getSegmentAtPos(0).setTo(ca.length-1);<a name="line.104"></a>
<span class="sourceLineNo">105</span><a name="line.105"></a>
<span class="sourceLineNo">106</span>                CutSites cutSites = new CutSites();<a name="line.106"></a>
<span class="sourceLineNo">107</span><a name="line.107"></a>
<span class="sourceLineNo">108</span>                // Do the initial splitting<a name="line.108"></a>
<span class="sourceLineNo">109</span>                CutDomain cutDomain = new CutDomain(ca,pdpMatrix);<a name="line.109"></a>
<span class="sourceLineNo">110</span>                cutDomain.cutDomain(dom, cutSites, pdpMatrix);<a name="line.110"></a>
<span class="sourceLineNo">111</span>                List&lt;Domain&gt; domains =  cutDomain.getDomains();<a name="line.111"></a>
<span class="sourceLineNo">112</span><a name="line.112"></a>
<span class="sourceLineNo">113</span>                <a name="line.113"></a>
<span class="sourceLineNo">114</span>                //<a name="line.114"></a>
<span class="sourceLineNo">115</span>                domains = ClusterDomains.cluster(domains, pdpMatrix);<a name="line.115"></a>
<span class="sourceLineNo">116</span><a name="line.116"></a>
<span class="sourceLineNo">117</span>                ShortSegmentRemover.cleanup(domains);<a name="line.117"></a>
<span class="sourceLineNo">118</span><a name="line.118"></a>
<span class="sourceLineNo">119</span><a name="line.119"></a>
<span class="sourceLineNo">120</span>                return domains;<a name="line.120"></a>
<span class="sourceLineNo">121</span><a name="line.121"></a>
<span class="sourceLineNo">122</span>        }<a name="line.122"></a>
<span class="sourceLineNo">123</span><a name="line.123"></a>
<span class="sourceLineNo">124</span>        <a name="line.124"></a>
<span class="sourceLineNo">125</span><a name="line.125"></a>
<span class="sourceLineNo">126</span>}<a name="line.126"></a>




























































</pre>
</div>
</body>
</html>
