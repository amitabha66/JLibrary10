<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>package org.biojava.bio.structure.align;<a name="line.1"></a>
<span class="sourceLineNo">002</span><a name="line.2"></a>
<span class="sourceLineNo">003</span>import java.lang.reflect.Constructor;<a name="line.3"></a>
<span class="sourceLineNo">004</span>import java.util.ArrayList;<a name="line.4"></a>
<span class="sourceLineNo">005</span>import java.util.List;<a name="line.5"></a>
<span class="sourceLineNo">006</span>import java.util.ListIterator;<a name="line.6"></a>
<span class="sourceLineNo">007</span><a name="line.7"></a>
<span class="sourceLineNo">008</span>import org.biojava.bio.structure.StructureException;<a name="line.8"></a>
<span class="sourceLineNo">009</span>import org.biojava.bio.structure.align.ce.CeCPMain;<a name="line.9"></a>
<span class="sourceLineNo">010</span>import org.biojava.bio.structure.align.ce.CeMain;<a name="line.10"></a>
<span class="sourceLineNo">011</span>import org.biojava.bio.structure.align.ce.OptimalCECPMain;<a name="line.11"></a>
<span class="sourceLineNo">012</span>import org.biojava.bio.structure.align.fatcat.FatCatFlexible;<a name="line.12"></a>
<span class="sourceLineNo">013</span>import org.biojava.bio.structure.align.fatcat.FatCatRigid;<a name="line.13"></a>
<span class="sourceLineNo">014</span>import org.biojava.bio.structure.align.seq.SmithWaterman3Daligner;<a name="line.14"></a>
<span class="sourceLineNo">015</span><a name="line.15"></a>
<span class="sourceLineNo">016</span><a name="line.16"></a>
<span class="sourceLineNo">017</span>public class StructureAlignmentFactory {<a name="line.17"></a>
<span class="sourceLineNo">018</span><a name="line.18"></a>
<span class="sourceLineNo">019</span>        private static List&lt;StructureAlignment&gt; algorithms = new ArrayList&lt;StructureAlignment&gt;();<a name="line.19"></a>
<span class="sourceLineNo">020</span><a name="line.20"></a>
<span class="sourceLineNo">021</span>        static {<a name="line.21"></a>
<span class="sourceLineNo">022</span>                algorithms.add( new CeMain() );<a name="line.22"></a>
<span class="sourceLineNo">023</span>                algorithms.add( new CeCPMain() );<a name="line.23"></a>
<span class="sourceLineNo">024</span>                //algorithms.add( new OptimalCECPMain() );<a name="line.24"></a>
<span class="sourceLineNo">025</span>                //algorithms.add(new CeSideChainMain());<a name="line.25"></a>
<span class="sourceLineNo">026</span><a name="line.26"></a>
<span class="sourceLineNo">027</span>                StructureAlignment fatcatRigid    = new FatCatRigid();<a name="line.27"></a>
<span class="sourceLineNo">028</span>                StructureAlignment fatcatFlexible = new FatCatFlexible();<a name="line.28"></a>
<span class="sourceLineNo">029</span><a name="line.29"></a>
<span class="sourceLineNo">030</span>                if ( fatcatRigid != null) {<a name="line.30"></a>
<span class="sourceLineNo">031</span>                        algorithms.add( fatcatRigid) ;<a name="line.31"></a>
<span class="sourceLineNo">032</span><a name="line.32"></a>
<span class="sourceLineNo">033</span>                }<a name="line.33"></a>
<span class="sourceLineNo">034</span>                if ( fatcatFlexible != null){<a name="line.34"></a>
<span class="sourceLineNo">035</span>                        algorithms.add( fatcatFlexible );<a name="line.35"></a>
<span class="sourceLineNo">036</span><a name="line.36"></a>
<span class="sourceLineNo">037</span>                }<a name="line.37"></a>
<span class="sourceLineNo">038</span>                algorithms.add( new SmithWaterman3Daligner()) ;<a name="line.38"></a>
<span class="sourceLineNo">039</span>                //algorithms.add( new BioJavaStructureAlignment());<a name="line.39"></a>
<span class="sourceLineNo">040</span>        }<a name="line.40"></a>
<span class="sourceLineNo">041</span><a name="line.41"></a>
<span class="sourceLineNo">042</span>        /**<a name="line.42"></a>
<span class="sourceLineNo">043</span>         * Adds a new StructureAlignment algorithm to the list.<a name="line.43"></a>
<span class="sourceLineNo">044</span>         * <a name="line.44"></a>
<span class="sourceLineNo">045</span>         * Only one instance is stored for each algorithmName, so it is possible<a name="line.45"></a>
<span class="sourceLineNo">046</span>         * that a different instance may be returned by getAlgorithm(alg.getAlgorithmName())<a name="line.46"></a>
<span class="sourceLineNo">047</span>         * <a name="line.47"></a>
<span class="sourceLineNo">048</span>         * @param alg the alignment algorithm<a name="line.48"></a>
<span class="sourceLineNo">049</span>         */<a name="line.49"></a>
<span class="sourceLineNo">050</span>        public static void addAlgorithm(StructureAlignment alg) {<a name="line.50"></a>
<span class="sourceLineNo">051</span>                //ensure uniqueness<a name="line.51"></a>
<span class="sourceLineNo">052</span>                try {<a name="line.52"></a>
<span class="sourceLineNo">053</span>                        getAlgorithm(alg.getAlgorithmName());<a name="line.53"></a>
<span class="sourceLineNo">054</span>                        // algorithm was found. Do nothing.<a name="line.54"></a>
<span class="sourceLineNo">055</span>                } catch(StructureException e) {<a name="line.55"></a>
<span class="sourceLineNo">056</span>                        // no algorithm found, so it's new<a name="line.56"></a>
<span class="sourceLineNo">057</span>                        algorithms.add(alg);<a name="line.57"></a>
<span class="sourceLineNo">058</span>                }<a name="line.58"></a>
<span class="sourceLineNo">059</span>        }<a name="line.59"></a>
<span class="sourceLineNo">060</span><a name="line.60"></a>
<span class="sourceLineNo">061</span>        /**<a name="line.61"></a>
<span class="sourceLineNo">062</span>         * Removes the specified algorithm from the list of options<a name="line.62"></a>
<span class="sourceLineNo">063</span>         * @param name the name of the algorithm to remove<a name="line.63"></a>
<span class="sourceLineNo">064</span>         * @return true if the specified algorithm was found and removed<a name="line.64"></a>
<span class="sourceLineNo">065</span>         */<a name="line.65"></a>
<span class="sourceLineNo">066</span>        public static boolean removeAlgorithm(String name) {<a name="line.66"></a>
<span class="sourceLineNo">067</span>                ListIterator&lt;StructureAlignment&gt; algIt = algorithms.listIterator();<a name="line.67"></a>
<span class="sourceLineNo">068</span>                while(algIt.hasNext()) {<a name="line.68"></a>
<span class="sourceLineNo">069</span>                        StructureAlignment alg = algIt.next();<a name="line.69"></a>
<span class="sourceLineNo">070</span>                        if(alg.getAlgorithmName().equalsIgnoreCase(name)) {<a name="line.70"></a>
<span class="sourceLineNo">071</span>                                algIt.remove();<a name="line.71"></a>
<span class="sourceLineNo">072</span>                                return true;<a name="line.72"></a>
<span class="sourceLineNo">073</span>                        }<a name="line.73"></a>
<span class="sourceLineNo">074</span>                }<a name="line.74"></a>
<span class="sourceLineNo">075</span>                return false;<a name="line.75"></a>
<span class="sourceLineNo">076</span>        }<a name="line.76"></a>
<span class="sourceLineNo">077</span><a name="line.77"></a>
<span class="sourceLineNo">078</span>        /**<a name="line.78"></a>
<span class="sourceLineNo">079</span>         * Removes all algorithms from the list<a name="line.79"></a>
<span class="sourceLineNo">080</span>         */<a name="line.80"></a>
<span class="sourceLineNo">081</span>        public static void clearAlgorithms() {<a name="line.81"></a>
<span class="sourceLineNo">082</span>                algorithms.clear();<a name="line.82"></a>
<span class="sourceLineNo">083</span>        }<a name="line.83"></a>
<span class="sourceLineNo">084</span><a name="line.84"></a>
<span class="sourceLineNo">085</span>        public static StructureAlignment getAlgorithm(String name) throws StructureException{<a name="line.85"></a>
<span class="sourceLineNo">086</span>                for ( StructureAlignment algo : algorithms){<a name="line.86"></a>
<span class="sourceLineNo">087</span>                        if (algo.getAlgorithmName().equalsIgnoreCase(name)) {<a name="line.87"></a>
<span class="sourceLineNo">088</span>                                //return algo;<a name="line.88"></a>
<span class="sourceLineNo">089</span>                                // CeCalculator is not thread safe,<a name="line.89"></a>
<span class="sourceLineNo">090</span>                                // avoid issues with this in multi-threaded environments bu<a name="line.90"></a>
<span class="sourceLineNo">091</span>                                // creating a new StructureAlignment every time this is called<a name="line.91"></a>
<span class="sourceLineNo">092</span>                                try {<a name="line.92"></a>
<span class="sourceLineNo">093</span>                                        Class&lt;StructureAlignment&gt; c = (Class&lt;StructureAlignment&gt;) Class.forName(algo.getClass().getName());<a name="line.93"></a>
<span class="sourceLineNo">094</span>                                        StructureAlignment sa = c.newInstance();<a name="line.94"></a>
<span class="sourceLineNo">095</span>                                        return sa;<a name="line.95"></a>
<span class="sourceLineNo">096</span>                                } catch (Exception e){<a name="line.96"></a>
<span class="sourceLineNo">097</span>                                        e.printStackTrace();<a name="line.97"></a>
<span class="sourceLineNo">098</span>                                        return null;<a name="line.98"></a>
<span class="sourceLineNo">099</span>                                }<a name="line.99"></a>
<span class="sourceLineNo">100</span>                        }<a name="line.100"></a>
<span class="sourceLineNo">101</span>                }<a name="line.101"></a>
<span class="sourceLineNo">102</span><a name="line.102"></a>
<span class="sourceLineNo">103</span>                throw new StructureException("Unknown alignment algorithm: " + name);<a name="line.103"></a>
<span class="sourceLineNo">104</span>        }<a name="line.104"></a>
<span class="sourceLineNo">105</span><a name="line.105"></a>
<span class="sourceLineNo">106</span>        public static StructureAlignment[] getAllAlgorithms(){<a name="line.106"></a>
<span class="sourceLineNo">107</span>                return algorithms.toArray(new StructureAlignment[algorithms.size()]);<a name="line.107"></a>
<span class="sourceLineNo">108</span>        }<a name="line.108"></a>
<span class="sourceLineNo">109</span><a name="line.109"></a>
<span class="sourceLineNo">110</span>        public static String[] getAllAlgorithmNames(){<a name="line.110"></a>
<span class="sourceLineNo">111</span>                StructureAlignment[] algos = getAllAlgorithms();<a name="line.111"></a>
<span class="sourceLineNo">112</span>                List&lt;String&gt; names = new ArrayList&lt;String&gt;();<a name="line.112"></a>
<span class="sourceLineNo">113</span><a name="line.113"></a>
<span class="sourceLineNo">114</span>                for (StructureAlignment alg : algos){<a name="line.114"></a>
<span class="sourceLineNo">115</span>                        names.add(alg.getAlgorithmName());<a name="line.115"></a>
<span class="sourceLineNo">116</span>                }<a name="line.116"></a>
<span class="sourceLineNo">117</span><a name="line.117"></a>
<span class="sourceLineNo">118</span>                return (String[])names.toArray(new String[names.size()]);<a name="line.118"></a>
<span class="sourceLineNo">119</span>        }<a name="line.119"></a>
<span class="sourceLineNo">120</span><a name="line.120"></a>
<span class="sourceLineNo">121</span>}<a name="line.121"></a>




























































</pre>
</div>
</body>
</html>
