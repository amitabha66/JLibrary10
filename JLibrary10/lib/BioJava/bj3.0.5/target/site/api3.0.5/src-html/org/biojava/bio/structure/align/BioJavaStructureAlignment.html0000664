<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/*<a name="line.1"></a>
<span class="sourceLineNo">002</span> *                    BioJava development code<a name="line.2"></a>
<span class="sourceLineNo">003</span> *<a name="line.3"></a>
<span class="sourceLineNo">004</span> * This code may be freely distributed and modified under the<a name="line.4"></a>
<span class="sourceLineNo">005</span> * terms of the GNU Lesser General Public Licence.  This should<a name="line.5"></a>
<span class="sourceLineNo">006</span> * be distributed with the code.  If you do not have a copy,<a name="line.6"></a>
<span class="sourceLineNo">007</span> * see:<a name="line.7"></a>
<span class="sourceLineNo">008</span> *<a name="line.8"></a>
<span class="sourceLineNo">009</span> *      http://www.gnu.org/copyleft/lesser.html<a name="line.9"></a>
<span class="sourceLineNo">010</span> *<a name="line.10"></a>
<span class="sourceLineNo">011</span> * Copyright for this code is held jointly by the individual<a name="line.11"></a>
<span class="sourceLineNo">012</span> * authors.  These should be listed in @author doc comments.<a name="line.12"></a>
<span class="sourceLineNo">013</span> *<a name="line.13"></a>
<span class="sourceLineNo">014</span> * For more information on the BioJava project and its aims,<a name="line.14"></a>
<span class="sourceLineNo">015</span> * or to join the biojava-l mailing list, visit the home page<a name="line.15"></a>
<span class="sourceLineNo">016</span> * at:<a name="line.16"></a>
<span class="sourceLineNo">017</span> *<a name="line.17"></a>
<span class="sourceLineNo">018</span> *      http://www.biojava.org/<a name="line.18"></a>
<span class="sourceLineNo">019</span> *<a name="line.19"></a>
<span class="sourceLineNo">020</span> * Created on Oct 2, 2009<a name="line.20"></a>
<span class="sourceLineNo">021</span> * Author: Andreas Prlic <a name="line.21"></a>
<span class="sourceLineNo">022</span> *<a name="line.22"></a>
<span class="sourceLineNo">023</span> */<a name="line.23"></a>
<span class="sourceLineNo">024</span><a name="line.24"></a>
<span class="sourceLineNo">025</span>package org.biojava.bio.structure.align;<a name="line.25"></a>
<span class="sourceLineNo">026</span><a name="line.26"></a>
<span class="sourceLineNo">027</span><a name="line.27"></a>
<span class="sourceLineNo">028</span>import org.biojava.bio.structure.Atom;<a name="line.28"></a>
<span class="sourceLineNo">029</span>import org.biojava.bio.structure.Group;<a name="line.29"></a>
<span class="sourceLineNo">030</span>import org.biojava.bio.structure.StructureException;<a name="line.30"></a>
<span class="sourceLineNo">031</span>import org.biojava.bio.structure.StructureTools;<a name="line.31"></a>
<span class="sourceLineNo">032</span>import org.biojava.bio.structure.align.StrucAligParameters;<a name="line.32"></a>
<span class="sourceLineNo">033</span>import org.biojava.bio.structure.align.StructurePairAligner;<a name="line.33"></a>
<span class="sourceLineNo">034</span>import org.biojava.bio.structure.align.ce.ConfigStrucAligParams;<a name="line.34"></a>
<span class="sourceLineNo">035</span><a name="line.35"></a>
<span class="sourceLineNo">036</span>import org.biojava.bio.structure.align.helper.IndexPair;<a name="line.36"></a>
<span class="sourceLineNo">037</span>import org.biojava.bio.structure.align.model.AFPChain;<a name="line.37"></a>
<span class="sourceLineNo">038</span>import org.biojava.bio.structure.align.pairwise.AlternativeAlignment;<a name="line.38"></a>
<span class="sourceLineNo">039</span>import org.biojava.bio.structure.jama.Matrix;<a name="line.39"></a>
<span class="sourceLineNo">040</span><a name="line.40"></a>
<span class="sourceLineNo">041</span><a name="line.41"></a>
<span class="sourceLineNo">042</span>/** Wrapper for the BioJava Structure Alignment Implementation<a name="line.42"></a>
<span class="sourceLineNo">043</span> * <a name="line.43"></a>
<span class="sourceLineNo">044</span> * @author Andreas Prlic<a name="line.44"></a>
<span class="sourceLineNo">045</span> *<a name="line.45"></a>
<span class="sourceLineNo">046</span> */<a name="line.46"></a>
<span class="sourceLineNo">047</span>public class BioJavaStructureAlignment<a name="line.47"></a>
<span class="sourceLineNo">048</span><a name="line.48"></a>
<span class="sourceLineNo">049</span>implements StructureAlignment  {<a name="line.49"></a>
<span class="sourceLineNo">050</span><a name="line.50"></a>
<span class="sourceLineNo">051</span>        public static final String algorithmName = "BioJava_structure";<a name="line.51"></a>
<span class="sourceLineNo">052</span>        private static final float versionNr = 0.1f;<a name="line.52"></a>
<span class="sourceLineNo">053</span>        StrucAligParameters params;<a name="line.53"></a>
<span class="sourceLineNo">054</span><a name="line.54"></a>
<span class="sourceLineNo">055</span>        public BioJavaStructureAlignment(){<a name="line.55"></a>
<span class="sourceLineNo">056</span>                params = new StrucAligParameters();<a name="line.56"></a>
<span class="sourceLineNo">057</span>        }<a name="line.57"></a>
<span class="sourceLineNo">058</span><a name="line.58"></a>
<span class="sourceLineNo">059</span>//      public StructureAlignmentJmol display(AFPChain afpChain, Atom[] ca1,<a name="line.59"></a>
<span class="sourceLineNo">060</span>//                      Atom[] ca2, List&lt;Group&gt; hetatms, List&lt;Group&gt; nucs1,<a name="line.60"></a>
<span class="sourceLineNo">061</span>//                      List&lt;Group&gt; hetatms2, List&lt;Group&gt; nucs2) throws StructureException {<a name="line.61"></a>
<span class="sourceLineNo">062</span>//              <a name="line.62"></a>
<span class="sourceLineNo">063</span>//      <a name="line.63"></a>
<span class="sourceLineNo">064</span>//<a name="line.64"></a>
<span class="sourceLineNo">065</span>//              Group[] twistedGroups = new Group[ ca2.length];<a name="line.65"></a>
<span class="sourceLineNo">066</span>//              <a name="line.66"></a>
<span class="sourceLineNo">067</span>//              int i=-1;<a name="line.67"></a>
<span class="sourceLineNo">068</span>//              Matrix m =  afpChain.getBlockRotationMatrix()[0];<a name="line.68"></a>
<span class="sourceLineNo">069</span>//              Atom shift =  afpChain.getBlockShiftVector()[0];<a name="line.69"></a>
<span class="sourceLineNo">070</span>//              <a name="line.70"></a>
<span class="sourceLineNo">071</span>//              for (Atom a: ca2){<a name="line.71"></a>
<span class="sourceLineNo">072</span>//                      i++;<a name="line.72"></a>
<span class="sourceLineNo">073</span>//                      twistedGroups[i]=a.getParent();<a name="line.73"></a>
<span class="sourceLineNo">074</span>//                      Calc.rotate(twistedGroups[i],m);<a name="line.74"></a>
<span class="sourceLineNo">075</span>//                      Calc.shift(twistedGroups[i],shift);<a name="line.75"></a>
<span class="sourceLineNo">076</span>//              }<a name="line.76"></a>
<span class="sourceLineNo">077</span>//              <a name="line.77"></a>
<span class="sourceLineNo">078</span>//              return DisplayAFP.display(afpChain, twistedGroups, ca1, ca2,hetatms, nucs2, hetatms2, nucs2);<a name="line.78"></a>
<span class="sourceLineNo">079</span>//      }<a name="line.79"></a>
<span class="sourceLineNo">080</span><a name="line.80"></a>
<span class="sourceLineNo">081</span>        public String getAlgorithmName() {<a name="line.81"></a>
<span class="sourceLineNo">082</span>                return algorithmName;<a name="line.82"></a>
<span class="sourceLineNo">083</span>        }<a name="line.83"></a>
<span class="sourceLineNo">084</span><a name="line.84"></a>
<span class="sourceLineNo">085</span>        public ConfigStrucAligParams getParameters() {<a name="line.85"></a>
<span class="sourceLineNo">086</span>                return null;//TODO shall we update it?<a name="line.86"></a>
<span class="sourceLineNo">087</span>        }<a name="line.87"></a>
<span class="sourceLineNo">088</span>        <a name="line.88"></a>
<span class="sourceLineNo">089</span>        public void setParameters(ConfigStrucAligParams o){<a name="line.89"></a>
<span class="sourceLineNo">090</span>                //TODO what is the relation between StrucAligParameters and ConfigStrucAligParams?<a name="line.90"></a>
<span class="sourceLineNo">091</span>                if ( ! (o instanceof StrucAligParameters)){<a name="line.91"></a>
<span class="sourceLineNo">092</span>                        throw new IllegalArgumentException("Provided parameters are not of type StrucAligParameters!");<a name="line.92"></a>
<span class="sourceLineNo">093</span>                }<a name="line.93"></a>
<span class="sourceLineNo">094</span>                params = (StrucAligParameters) o;<a name="line.94"></a>
<span class="sourceLineNo">095</span>        }<a name="line.95"></a>
<span class="sourceLineNo">096</span><a name="line.96"></a>
<span class="sourceLineNo">097</span>        public String getVersion() {<a name="line.97"></a>
<span class="sourceLineNo">098</span>                return versionNr+"";<a name="line.98"></a>
<span class="sourceLineNo">099</span>        }<a name="line.99"></a>
<span class="sourceLineNo">100</span><a name="line.100"></a>
<span class="sourceLineNo">101</span>        public String printHelp() {<a name="line.101"></a>
<span class="sourceLineNo">102</span>                return "not implemented yet. Algorithm still under development.";<a name="line.102"></a>
<span class="sourceLineNo">103</span>        }<a name="line.103"></a>
<span class="sourceLineNo">104</span><a name="line.104"></a>
<span class="sourceLineNo">105</span><a name="line.105"></a>
<span class="sourceLineNo">106</span><a name="line.106"></a>
<span class="sourceLineNo">107</span>        public AFPChain align(Atom[] ca1, Atom[] ca2) throws StructureException {<a name="line.107"></a>
<span class="sourceLineNo">108</span>                StrucAligParameters params = StrucAligParameters.getDefaultParameters();<a name="line.108"></a>
<span class="sourceLineNo">109</span>                return align(ca1,ca2,params);<a name="line.109"></a>
<span class="sourceLineNo">110</span>                <a name="line.110"></a>
<span class="sourceLineNo">111</span>        }<a name="line.111"></a>
<span class="sourceLineNo">112</span><a name="line.112"></a>
<span class="sourceLineNo">113</span><a name="line.113"></a>
<span class="sourceLineNo">114</span>        public AFPChain align(Atom[] ca1, Atom[] ca2, Object params)<a name="line.114"></a>
<span class="sourceLineNo">115</span>        throws StructureException {<a name="line.115"></a>
<span class="sourceLineNo">116</span>                if ( ! (params instanceof StrucAligParameters)){<a name="line.116"></a>
<span class="sourceLineNo">117</span>                        throw new IllegalArgumentException("BioJava structure alignment requires a StrucAligParameters class for the arguments.");<a name="line.117"></a>
<span class="sourceLineNo">118</span>                }<a name="line.118"></a>
<span class="sourceLineNo">119</span>                this.params = (StrucAligParameters) params;<a name="line.119"></a>
<span class="sourceLineNo">120</span><a name="line.120"></a>
<span class="sourceLineNo">121</span>                AFPChain afpChain = new AFPChain();<a name="line.121"></a>
<span class="sourceLineNo">122</span>                StructurePairAligner aligner = new StructurePairAligner();<a name="line.122"></a>
<span class="sourceLineNo">123</span>                aligner.align(ca1,ca2,this.params);<a name="line.123"></a>
<span class="sourceLineNo">124</span><a name="line.124"></a>
<span class="sourceLineNo">125</span>                // copy the results over into the AFPChain...<a name="line.125"></a>
<span class="sourceLineNo">126</span>                AlternativeAlignment[] aligs = aligner.getAlignments();<a name="line.126"></a>
<span class="sourceLineNo">127</span>                if ( aligs.length &gt; 0){<a name="line.127"></a>
<span class="sourceLineNo">128</span><a name="line.128"></a>
<span class="sourceLineNo">129</span>                        AlternativeAlignment altAlig = aligs[0];<a name="line.129"></a>
<span class="sourceLineNo">130</span>                        // copy the results over!<a name="line.130"></a>
<span class="sourceLineNo">131</span>                        copyResults(afpChain,altAlig,ca1,ca2);<a name="line.131"></a>
<span class="sourceLineNo">132</span><a name="line.132"></a>
<span class="sourceLineNo">133</span><a name="line.133"></a>
<span class="sourceLineNo">134</span>                }<a name="line.134"></a>
<span class="sourceLineNo">135</span><a name="line.135"></a>
<span class="sourceLineNo">136</span>                return afpChain;<a name="line.136"></a>
<span class="sourceLineNo">137</span><a name="line.137"></a>
<span class="sourceLineNo">138</span>        }<a name="line.138"></a>
<span class="sourceLineNo">139</span><a name="line.139"></a>
<span class="sourceLineNo">140</span><a name="line.140"></a>
<span class="sourceLineNo">141</span><a name="line.141"></a>
<span class="sourceLineNo">142</span>        private void copyResults(AFPChain afpChain, AlternativeAlignment altAlig, Atom[] ca1, Atom[] ca2) {<a name="line.142"></a>
<span class="sourceLineNo">143</span>                afpChain.setAlgorithmName(getAlgorithmName());<a name="line.143"></a>
<span class="sourceLineNo">144</span>                afpChain.setVersion(getVersion());<a name="line.144"></a>
<span class="sourceLineNo">145</span>                afpChain.setAlignScore(altAlig.getScore());<a name="line.145"></a>
<span class="sourceLineNo">146</span>                afpChain.setOptLength(altAlig.getEqr());<a name="line.146"></a>
<span class="sourceLineNo">147</span>                afpChain.setBlockRotationMatrix(new Matrix[]{altAlig.getRotationMatrix()});<a name="line.147"></a>
<span class="sourceLineNo">148</span>                afpChain.setBlockShiftVector(new Atom[]{altAlig.getShift() });<a name="line.148"></a>
<span class="sourceLineNo">149</span>                afpChain.setBlockNum(1);<a name="line.149"></a>
<span class="sourceLineNo">150</span>                <a name="line.150"></a>
<span class="sourceLineNo">151</span>                double rmsd = altAlig.getRmsd();<a name="line.151"></a>
<span class="sourceLineNo">152</span>                afpChain.setBlockRmsd(new double[]{rmsd});<a name="line.152"></a>
<span class="sourceLineNo">153</span>                <a name="line.153"></a>
<span class="sourceLineNo">154</span>                <a name="line.154"></a>
<span class="sourceLineNo">155</span>                int nAtom = altAlig.getEqr();<a name="line.155"></a>
<span class="sourceLineNo">156</span>                int lcmp = altAlig.getPath().length;<a name="line.156"></a>
<span class="sourceLineNo">157</span>                int[] optLen = new int[]{nAtom};<a name="line.157"></a>
<span class="sourceLineNo">158</span>                afpChain.setOptLen(optLen);<a name="line.158"></a>
<span class="sourceLineNo">159</span>                afpChain.setOptLength(nAtom);           <a name="line.159"></a>
<span class="sourceLineNo">160</span>                afpChain.setAlnLength(lcmp);<a name="line.160"></a>
<span class="sourceLineNo">161</span>                                <a name="line.161"></a>
<span class="sourceLineNo">162</span>                int[][][] optAln = new int[1][2][lcmp];<a name="line.162"></a>
<span class="sourceLineNo">163</span>                afpChain.setOptAln(optAln);<a name="line.163"></a>
<span class="sourceLineNo">164</span>                <a name="line.164"></a>
<span class="sourceLineNo">165</span>                afpChain.setOptRmsd(new double[]{rmsd});<a name="line.165"></a>
<span class="sourceLineNo">166</span>                afpChain.setTotalRmsdOpt(rmsd);<a name="line.166"></a>
<span class="sourceLineNo">167</span>                afpChain.setChainRmsd(rmsd);<a name="line.167"></a>
<span class="sourceLineNo">168</span>                //afpChain.setProbability(-1);<a name="line.168"></a>
<span class="sourceLineNo">169</span>                int nse1 = ca1.length;<a name="line.169"></a>
<span class="sourceLineNo">170</span>                int nse2 = ca2.length;<a name="line.170"></a>
<span class="sourceLineNo">171</span>                <a name="line.171"></a>
<span class="sourceLineNo">172</span>                char[] alnseq1 = new char[nse1+nse2+1];<a name="line.172"></a>
<span class="sourceLineNo">173</span>                char[] alnseq2 = new char[nse1+nse2+1] ;<a name="line.173"></a>
<span class="sourceLineNo">174</span>                char[] alnsymb = new char[nse1+nse2+1];<a name="line.174"></a>
<span class="sourceLineNo">175</span>     <a name="line.175"></a>
<span class="sourceLineNo">176</span>                IndexPair[] path = altAlig.getPath(); <a name="line.176"></a>
<span class="sourceLineNo">177</span>        <a name="line.177"></a>
<span class="sourceLineNo">178</span>                int pos = 0;<a name="line.178"></a>
<span class="sourceLineNo">179</span>                for(int ia=0; ia&lt;lcmp; ia++) {<a name="line.179"></a>
<span class="sourceLineNo">180</span><a name="line.180"></a>
<span class="sourceLineNo">181</span>                        IndexPair align_se = path[ia];<a name="line.181"></a>
<span class="sourceLineNo">182</span>                        // no gap<a name="line.182"></a>
<span class="sourceLineNo">183</span>                        if(align_se.getRow() !=-1 &amp;&amp; align_se.getCol()!=-1) {<a name="line.183"></a>
<span class="sourceLineNo">184</span><a name="line.184"></a>
<span class="sourceLineNo">185</span>                                optAln[0][0][pos] = align_se.getRow();<a name="line.185"></a>
<span class="sourceLineNo">186</span>                                optAln[0][1][pos] = align_se.getCol();<a name="line.186"></a>
<span class="sourceLineNo">187</span>                                <a name="line.187"></a>
<span class="sourceLineNo">188</span>                                char l1 = getOneLetter(ca1[align_se.getRow()].getGroup());<a name="line.188"></a>
<span class="sourceLineNo">189</span>                                char l2 = getOneLetter(ca2[align_se.getCol()].getGroup());<a name="line.189"></a>
<span class="sourceLineNo">190</span>                                <a name="line.190"></a>
<span class="sourceLineNo">191</span>                                alnseq1[ia] = Character.toUpperCase(l1);<a name="line.191"></a>
<span class="sourceLineNo">192</span>                                alnseq2[ia] = Character.toUpperCase(l2);<a name="line.192"></a>
<span class="sourceLineNo">193</span>                                alnsymb[ia] = '1';<a name="line.193"></a>
<span class="sourceLineNo">194</span>                                pos++;<a name="line.194"></a>
<span class="sourceLineNo">195</span>                                                                <a name="line.195"></a>
<span class="sourceLineNo">196</span>                        } else {<a name="line.196"></a>
<span class="sourceLineNo">197</span>                                // there is a gap on this position<a name="line.197"></a>
<span class="sourceLineNo">198</span>                                alnsymb[ia] = ' ';<a name="line.198"></a>
<span class="sourceLineNo">199</span>                                if (align_se.getRow() == -1 ) {<a name="line.199"></a>
<span class="sourceLineNo">200</span>                                        alnseq1[ia] = '-';<a name="line.200"></a>
<span class="sourceLineNo">201</span>                                } else {<a name="line.201"></a>
<span class="sourceLineNo">202</span>                                        char l1 = getOneLetter(ca1[align_se.getRow()].getGroup());<a name="line.202"></a>
<span class="sourceLineNo">203</span>                                        alnseq1[ia] = Character.toLowerCase(l1);<a name="line.203"></a>
<span class="sourceLineNo">204</span>                                }<a name="line.204"></a>
<span class="sourceLineNo">205</span>                                if ( align_se.getCol() == -1 ) {<a name="line.205"></a>
<span class="sourceLineNo">206</span>                                        alnseq2[ia] = '-';<a name="line.206"></a>
<span class="sourceLineNo">207</span>                                } else {<a name="line.207"></a>
<span class="sourceLineNo">208</span>                                        char l2 = getOneLetter(ca2[align_se.getCol()].getGroup());<a name="line.208"></a>
<span class="sourceLineNo">209</span>                                        alnseq2[ia] = Character.toLowerCase(l2);<a name="line.209"></a>
<span class="sourceLineNo">210</span>                                }<a name="line.210"></a>
<span class="sourceLineNo">211</span>                                <a name="line.211"></a>
<span class="sourceLineNo">212</span>                        }<a name="line.212"></a>
<span class="sourceLineNo">213</span>                }<a name="line.213"></a>
<span class="sourceLineNo">214</span>                afpChain.setAlnseq1(alnseq1);<a name="line.214"></a>
<span class="sourceLineNo">215</span>        afpChain.setAlnseq2(alnseq2);<a name="line.215"></a>
<span class="sourceLineNo">216</span>        afpChain.setAlnsymb(alnsymb);<a name="line.216"></a>
<span class="sourceLineNo">217</span><a name="line.217"></a>
<span class="sourceLineNo">218</span>        }<a name="line.218"></a>
<span class="sourceLineNo">219</span>        <a name="line.219"></a>
<span class="sourceLineNo">220</span>        private static char getOneLetter(Group g){<a name="line.220"></a>
<span class="sourceLineNo">221</span><a name="line.221"></a>
<span class="sourceLineNo">222</span>        try {<a name="line.222"></a>
<span class="sourceLineNo">223</span>           Character c = StructureTools.get1LetterCode(g.getPDBName());<a name="line.223"></a>
<span class="sourceLineNo">224</span>           return c;<a name="line.224"></a>
<span class="sourceLineNo">225</span>        } catch (Exception e){<a name="line.225"></a>
<span class="sourceLineNo">226</span>           return 'X';<a name="line.226"></a>
<span class="sourceLineNo">227</span>        }<a name="line.227"></a>
<span class="sourceLineNo">228</span>     }<a name="line.228"></a>
<span class="sourceLineNo">229</span><a name="line.229"></a>
<span class="sourceLineNo">230</span>}<a name="line.230"></a>




























































</pre>
</div>
</body>
</html>
