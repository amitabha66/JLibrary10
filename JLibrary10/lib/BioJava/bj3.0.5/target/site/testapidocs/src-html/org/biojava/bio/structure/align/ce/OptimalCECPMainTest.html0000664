<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Source code</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../stylesheet.css" title="Style">
</head>
<body>
<div class="sourceContainer">
<pre><span class="sourceLineNo">001</span>/**<a name="line.1"></a>
<span class="sourceLineNo">002</span> * <a name="line.2"></a>
<span class="sourceLineNo">003</span> */<a name="line.3"></a>
<span class="sourceLineNo">004</span>package org.biojava.bio.structure.align.ce;<a name="line.4"></a>
<span class="sourceLineNo">005</span><a name="line.5"></a>
<span class="sourceLineNo">006</span>import java.io.IOException;<a name="line.6"></a>
<span class="sourceLineNo">007</span>import java.lang.reflect.InvocationTargetException;<a name="line.7"></a>
<span class="sourceLineNo">008</span>import java.lang.reflect.Method;<a name="line.8"></a>
<span class="sourceLineNo">009</span>import java.util.Arrays;<a name="line.9"></a>
<span class="sourceLineNo">010</span><a name="line.10"></a>
<span class="sourceLineNo">011</span>import org.biojava.bio.structure.Atom;<a name="line.11"></a>
<span class="sourceLineNo">012</span>import org.biojava.bio.structure.StructureException;<a name="line.12"></a>
<span class="sourceLineNo">013</span>import org.biojava.bio.structure.StructureTools;<a name="line.13"></a>
<span class="sourceLineNo">014</span>import org.biojava.bio.structure.align.StructureAlignmentFactory;<a name="line.14"></a>
<span class="sourceLineNo">015</span>import org.biojava.bio.structure.align.model.AFPChain;<a name="line.15"></a>
<span class="sourceLineNo">016</span>import org.biojava.bio.structure.align.util.AtomCache;<a name="line.16"></a>
<span class="sourceLineNo">017</span><a name="line.17"></a>
<span class="sourceLineNo">018</span>import junit.framework.TestCase;<a name="line.18"></a>
<span class="sourceLineNo">019</span><a name="line.19"></a>
<span class="sourceLineNo">020</span>/**<a name="line.20"></a>
<span class="sourceLineNo">021</span> * @author Spencer Bliven<a name="line.21"></a>
<span class="sourceLineNo">022</span> *<a name="line.22"></a>
<span class="sourceLineNo">023</span> */<a name="line.23"></a>
<span class="sourceLineNo">024</span>public class OptimalCECPMainTest extends TestCase {<a name="line.24"></a>
<span class="sourceLineNo">025</span><a name="line.25"></a>
<span class="sourceLineNo">026</span>        AtomCache cache = new AtomCache();<a name="line.26"></a>
<span class="sourceLineNo">027</span>        <a name="line.27"></a>
<span class="sourceLineNo">028</span>        /* (non-Javadoc)<a name="line.28"></a>
<span class="sourceLineNo">029</span>         * @see junit.framework.TestCase#setUp()<a name="line.29"></a>
<span class="sourceLineNo">030</span>         */<a name="line.30"></a>
<span class="sourceLineNo">031</span>        protected void setUp() throws Exception {<a name="line.31"></a>
<span class="sourceLineNo">032</span>                super.setUp();<a name="line.32"></a>
<span class="sourceLineNo">033</span>        }<a name="line.33"></a>
<span class="sourceLineNo">034</span>        <a name="line.34"></a>
<span class="sourceLineNo">035</span>        /**<a name="line.35"></a>
<span class="sourceLineNo">036</span>         * Basic test that alignPermuted(..., 0) is equivalent to a normal CE alignment.<a name="line.36"></a>
<span class="sourceLineNo">037</span>         * <a name="line.37"></a>
<span class="sourceLineNo">038</span>         * Also checks that {@link AFPChain#equals(Object)} is working the way we expect.<a name="line.38"></a>
<span class="sourceLineNo">039</span>         * @throws IOException<a name="line.39"></a>
<span class="sourceLineNo">040</span>         * @throws StructureException<a name="line.40"></a>
<span class="sourceLineNo">041</span>         */<a name="line.41"></a>
<span class="sourceLineNo">042</span>        public void testUnpermuted() throws IOException, StructureException {<a name="line.42"></a>
<span class="sourceLineNo">043</span>                String name1, name2;<a name="line.43"></a>
<span class="sourceLineNo">044</span>                <a name="line.44"></a>
<span class="sourceLineNo">045</span>                //small case<a name="line.45"></a>
<span class="sourceLineNo">046</span>                name1 = "d1qdmA1";<a name="line.46"></a>
<span class="sourceLineNo">047</span>                name2 = "d1nklA_";<a name="line.47"></a>
<span class="sourceLineNo">048</span>                <a name="line.48"></a>
<span class="sourceLineNo">049</span>                Atom[] ca1 = cache.getAtoms(name1);<a name="line.49"></a>
<span class="sourceLineNo">050</span>                Atom[] ca2 = cache.getAtoms(name2);<a name="line.50"></a>
<span class="sourceLineNo">051</span><a name="line.51"></a>
<span class="sourceLineNo">052</span>                // Calculate all alignments initially<a name="line.52"></a>
<span class="sourceLineNo">053</span>                OptimalCECPMain cecp = new OptimalCECPMain();<a name="line.53"></a>
<span class="sourceLineNo">054</span>                Atom[] ca2clone = cache.getAtoms(name2);<a name="line.54"></a>
<span class="sourceLineNo">055</span>                AFPChain cp0 = cecp.alignPermuted(ca1, ca2clone, (OptimalCECPParameters) cecp.getParameters(), 0);<a name="line.55"></a>
<span class="sourceLineNo">056</span><a name="line.56"></a>
<span class="sourceLineNo">057</span>                CeMain ce = new CeMain();<a name="line.57"></a>
<span class="sourceLineNo">058</span>                AFPChain nocp = ce.align(ca1,ca2);<a name="line.58"></a>
<span class="sourceLineNo">059</span>                <a name="line.59"></a>
<span class="sourceLineNo">060</span>                assertEquals(nocp,cp0);<a name="line.60"></a>
<span class="sourceLineNo">061</span>        }<a name="line.61"></a>
<span class="sourceLineNo">062</span>        <a name="line.62"></a>
<span class="sourceLineNo">063</span>        /**<a name="line.63"></a>
<span class="sourceLineNo">064</span>         * Very basic test of {@link OptimalCECPMain#permuteOptAln(AFPChain, int)}<a name="line.64"></a>
<span class="sourceLineNo">065</span>         * <a name="line.65"></a>
<span class="sourceLineNo">066</span>         * It should do nothing on unpermuted alignments.<a name="line.66"></a>
<span class="sourceLineNo">067</span>         * @throws NoSuchMethodException <a name="line.67"></a>
<span class="sourceLineNo">068</span>         * @throws SecurityException <a name="line.68"></a>
<span class="sourceLineNo">069</span>         * @throws StructureException <a name="line.69"></a>
<span class="sourceLineNo">070</span>         * @throws IOException <a name="line.70"></a>
<span class="sourceLineNo">071</span>         * @throws InvocationTargetException <a name="line.71"></a>
<span class="sourceLineNo">072</span>         * @throws IllegalAccessException <a name="line.72"></a>
<span class="sourceLineNo">073</span>         * @throws IllegalArgumentException <a name="line.73"></a>
<span class="sourceLineNo">074</span>         */<a name="line.74"></a>
<span class="sourceLineNo">075</span>        public void testPermuteOptAlnUnpermuted() throws SecurityException, NoSuchMethodException, StructureException, IOException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {<a name="line.75"></a>
<span class="sourceLineNo">076</span>                //test private member using reflection<a name="line.76"></a>
<span class="sourceLineNo">077</span>                Method permuteOptAln = OptimalCECPMain.class.getDeclaredMethod(<a name="line.77"></a>
<span class="sourceLineNo">078</span>                                "permuteOptAln", AFPChain.class, int.class);<a name="line.78"></a>
<span class="sourceLineNo">079</span>                permuteOptAln.setAccessible(true);<a name="line.79"></a>
<span class="sourceLineNo">080</span><a name="line.80"></a>
<span class="sourceLineNo">081</span>                String name1, name2;<a name="line.81"></a>
<span class="sourceLineNo">082</span>                name1 = "d1qdmA1";<a name="line.82"></a>
<span class="sourceLineNo">083</span>                name2 = "d1nklA_";<a name="line.83"></a>
<span class="sourceLineNo">084</span>                <a name="line.84"></a>
<span class="sourceLineNo">085</span>                CeMain ce = (CeCPMain) StructureAlignmentFactory.getAlgorithm(CeCPMain.algorithmName);<a name="line.85"></a>
<span class="sourceLineNo">086</span><a name="line.86"></a>
<span class="sourceLineNo">087</span>                Atom[] ca1 = cache.getAtoms(name1);<a name="line.87"></a>
<span class="sourceLineNo">088</span>                Atom[] ca2 = cache.getAtoms(name2);<a name="line.88"></a>
<span class="sourceLineNo">089</span>                <a name="line.89"></a>
<span class="sourceLineNo">090</span>                AFPChain afpChain = ce.align(ca1, ca2);<a name="line.90"></a>
<span class="sourceLineNo">091</span>                AFPChain afpChain2 = (AFPChain) afpChain.clone();<a name="line.91"></a>
<span class="sourceLineNo">092</span>                <a name="line.92"></a>
<span class="sourceLineNo">093</span>                permuteOptAln.invoke(null, afpChain2, 0);<a name="line.93"></a>
<span class="sourceLineNo">094</span>                <a name="line.94"></a>
<span class="sourceLineNo">095</span>                assertEquals("Permuting by 0 changed the alignment!",afpChain, afpChain2);<a name="line.95"></a>
<span class="sourceLineNo">096</span>        }<a name="line.96"></a>
<span class="sourceLineNo">097</span>        <a name="line.97"></a>
<span class="sourceLineNo">098</span>        /**<a name="line.98"></a>
<span class="sourceLineNo">099</span>         * Checks that individual alignments performed by alignOptimal are consistent<a name="line.99"></a>
<span class="sourceLineNo">100</span>         * with the alignments returned by individual calls to alignPermuted.<a name="line.100"></a>
<span class="sourceLineNo">101</span>         * <a name="line.101"></a>
<span class="sourceLineNo">102</span>         * This addresses a bug involving multiple calls to align() on the same<a name="line.102"></a>
<span class="sourceLineNo">103</span>         * CE instance.<a name="line.103"></a>
<span class="sourceLineNo">104</span>         * <a name="line.104"></a>
<span class="sourceLineNo">105</span>         * @throws IOException<a name="line.105"></a>
<span class="sourceLineNo">106</span>         * @throws StructureException<a name="line.106"></a>
<span class="sourceLineNo">107</span>         */<a name="line.107"></a>
<span class="sourceLineNo">108</span>        public void testOptimalAlignmentConsistency() throws IOException, StructureException {<a name="line.108"></a>
<span class="sourceLineNo">109</span>                String name1, name2;<a name="line.109"></a>
<span class="sourceLineNo">110</span>                OptimalCECPMain ce;<a name="line.110"></a>
<span class="sourceLineNo">111</span>                AFPChain afpChain;<a name="line.111"></a>
<span class="sourceLineNo">112</span>                int[] cps; //CP points to check for consistency<a name="line.112"></a>
<span class="sourceLineNo">113</span>                <a name="line.113"></a>
<span class="sourceLineNo">114</span>                //small case<a name="line.114"></a>
<span class="sourceLineNo">115</span>                name1 = "d1qdmA1";<a name="line.115"></a>
<span class="sourceLineNo">116</span>                name2 = "d1nklA_";<a name="line.116"></a>
<span class="sourceLineNo">117</span>                cps = new int[] {0,1,2,41,5,38};<a name="line.117"></a>
<span class="sourceLineNo">118</span>                <a name="line.118"></a>
<span class="sourceLineNo">119</span>                Atom[] ca1 = cache.getAtoms(name1);<a name="line.119"></a>
<span class="sourceLineNo">120</span>                Atom[] ca2 = cache.getAtoms(name2);<a name="line.120"></a>
<span class="sourceLineNo">121</span><a name="line.121"></a>
<span class="sourceLineNo">122</span>                // Calculate all alignments initially<a name="line.122"></a>
<span class="sourceLineNo">123</span>                ce = new OptimalCECPMain();<a name="line.123"></a>
<span class="sourceLineNo">124</span>                AFPChain[] alignments = new AFPChain[ca2.length];<a name="line.124"></a>
<span class="sourceLineNo">125</span>                ce.alignOptimal(ca1, ca2, (OptimalCECPParameters) ce.getParameters(), alignments);<a name="line.125"></a>
<span class="sourceLineNo">126</span>                <a name="line.126"></a>
<span class="sourceLineNo">127</span>                for(int cp : cps) {<a name="line.127"></a>
<span class="sourceLineNo">128</span>                        // fresh instance to avoid contamination<a name="line.128"></a>
<span class="sourceLineNo">129</span>                        ce = new OptimalCECPMain();<a name="line.129"></a>
<span class="sourceLineNo">130</span>                        <a name="line.130"></a>
<span class="sourceLineNo">131</span>                        // new copy of ca2, since alignPermuted has side effects<a name="line.131"></a>
<span class="sourceLineNo">132</span>                        Atom[] ca2clone = cache.getAtoms(name2);<a name="line.132"></a>
<span class="sourceLineNo">133</span>                        afpChain = ce.alignPermuted(ca1, ca2clone, (OptimalCECPParameters) ce.getParameters(), cp);<a name="line.133"></a>
<span class="sourceLineNo">134</span><a name="line.134"></a>
<span class="sourceLineNo">135</span>                        assertEquals("Alignment "+cp+" differs.",afpChain, alignments[cp]);<a name="line.135"></a>
<span class="sourceLineNo">136</span>                }<a name="line.136"></a>
<span class="sourceLineNo">137</span>                <a name="line.137"></a>
<span class="sourceLineNo">138</span>        }<a name="line.138"></a>
<span class="sourceLineNo">139</span>        <a name="line.139"></a>
<span class="sourceLineNo">140</span>        /**<a name="line.140"></a>
<span class="sourceLineNo">141</span>         * Tests private {@link OptimalCECPMain#permuteArray(Object[], int)}<a name="line.141"></a>
<span class="sourceLineNo">142</span>         * @throws Exception<a name="line.142"></a>
<span class="sourceLineNo">143</span>         */<a name="line.143"></a>
<span class="sourceLineNo">144</span>        public void testPermuteArray() throws Exception {<a name="line.144"></a>
<span class="sourceLineNo">145</span>                //test private member using reflection<a name="line.145"></a>
<span class="sourceLineNo">146</span>                Method permuteArray = OptimalCECPMain.class.getDeclaredMethod(<a name="line.146"></a>
<span class="sourceLineNo">147</span>                                "permuteArray", Object[].class, int.class);<a name="line.147"></a>
<span class="sourceLineNo">148</span>                permuteArray.setAccessible(true);<a name="line.148"></a>
<span class="sourceLineNo">149</span><a name="line.149"></a>
<span class="sourceLineNo">150</span>                String[] arr0 = new String[] {"A","B","C","D","E","F"};<a name="line.150"></a>
<span class="sourceLineNo">151</span>                String[] arr1 = new String[] {"B","C","D","E","F","A"};<a name="line.151"></a>
<span class="sourceLineNo">152</span>                String[] arr5 = new String[] {"F","A","B","C","D","E"};<a name="line.152"></a>
<span class="sourceLineNo">153</span><a name="line.153"></a>
<span class="sourceLineNo">154</span>                String[] arrP;<a name="line.154"></a>
<span class="sourceLineNo">155</span><a name="line.155"></a>
<span class="sourceLineNo">156</span>                arrP = Arrays.copyOf(arr0, arr0.length);<a name="line.156"></a>
<span class="sourceLineNo">157</span>                assertTrue("Shallow equals!",Arrays.deepEquals(arr0, arrP));<a name="line.157"></a>
<span class="sourceLineNo">158</span>                permuteArray.invoke(null, arrP, 0);<a name="line.158"></a>
<span class="sourceLineNo">159</span>                assertTrue(String.format("Permuting by 0 gave %s%s%s%s%s%s",(Object[])arrP),<a name="line.159"></a>
<span class="sourceLineNo">160</span>                                Arrays.deepEquals(arr0, arrP));<a name="line.160"></a>
<span class="sourceLineNo">161</span>                <a name="line.161"></a>
<span class="sourceLineNo">162</span>                arrP = Arrays.copyOf(arr0, arr0.length);<a name="line.162"></a>
<span class="sourceLineNo">163</span>                permuteArray.invoke(null, arrP, 1);<a name="line.163"></a>
<span class="sourceLineNo">164</span>                assertTrue(String.format("Permuting by 1 gave %s%s%s%s%s%s",(Object[])arrP),<a name="line.164"></a>
<span class="sourceLineNo">165</span>                                Arrays.deepEquals(arr1, arrP));<a name="line.165"></a>
<span class="sourceLineNo">166</span><a name="line.166"></a>
<span class="sourceLineNo">167</span>                arrP = Arrays.copyOf(arr0, arr0.length);<a name="line.167"></a>
<span class="sourceLineNo">168</span>                permuteArray.invoke(null, arrP, 5);<a name="line.168"></a>
<span class="sourceLineNo">169</span>                assertTrue(String.format("Permuting by 7 gave %s%s%s%s%s%s",(Object[])arrP),<a name="line.169"></a>
<span class="sourceLineNo">170</span>                                Arrays.deepEquals(arr5, arrP));<a name="line.170"></a>
<span class="sourceLineNo">171</span><a name="line.171"></a>
<span class="sourceLineNo">172</span>                arrP = Arrays.copyOf(arr0, arr0.length);<a name="line.172"></a>
<span class="sourceLineNo">173</span>                permuteArray.invoke(null, arrP, -1);<a name="line.173"></a>
<span class="sourceLineNo">174</span>                assertTrue(String.format("Permuting by -1 gave %s%s%s%s%s%s",(Object[])arrP),<a name="line.174"></a>
<span class="sourceLineNo">175</span>                                Arrays.deepEquals(arr5, arrP));<a name="line.175"></a>
<span class="sourceLineNo">176</span><a name="line.176"></a>
<span class="sourceLineNo">177</span>                try {<a name="line.177"></a>
<span class="sourceLineNo">178</span>                        arrP = Arrays.copyOf(arr0, arr0.length);<a name="line.178"></a>
<span class="sourceLineNo">179</span>                        permuteArray.invoke(null, arrP, 6);<a name="line.179"></a>
<span class="sourceLineNo">180</span>                        fail("Illegal index. Should throw exception.");<a name="line.180"></a>
<span class="sourceLineNo">181</span>                } catch( InvocationTargetException e) {<a name="line.181"></a>
<span class="sourceLineNo">182</span>                        if( ! (e.getCause() instanceof ArrayIndexOutOfBoundsException)) {<a name="line.182"></a>
<span class="sourceLineNo">183</span>                                throw e;<a name="line.183"></a>
<span class="sourceLineNo">184</span>                        }<a name="line.184"></a>
<span class="sourceLineNo">185</span>                }<a name="line.185"></a>
<span class="sourceLineNo">186</span>        }<a name="line.186"></a>
<span class="sourceLineNo">187</span><a name="line.187"></a>
<span class="sourceLineNo">188</span>        /**<a name="line.188"></a>
<span class="sourceLineNo">189</span>         * Tests private {@link OptimalCECPMain#permuteOptAln(AFPChain, int)}<a name="line.189"></a>
<span class="sourceLineNo">190</span>         */<a name="line.190"></a>
<span class="sourceLineNo">191</span>        public void testPermuteOptAln() throws Exception {<a name="line.191"></a>
<span class="sourceLineNo">192</span>                //test private member using reflection<a name="line.192"></a>
<span class="sourceLineNo">193</span>                Method permuteOptAln = OptimalCECPMain.class.getDeclaredMethod(<a name="line.193"></a>
<span class="sourceLineNo">194</span>                                "permuteOptAln", AFPChain.class, int.class);<a name="line.194"></a>
<span class="sourceLineNo">195</span>                permuteOptAln.setAccessible(true);<a name="line.195"></a>
<span class="sourceLineNo">196</span>                <a name="line.196"></a>
<span class="sourceLineNo">197</span>                // Two structures with nearly 100% sequence identity<a name="line.197"></a>
<span class="sourceLineNo">198</span>                /* <a name="line.198"></a>
<span class="sourceLineNo">199</span>                 * Aligned (0-based index):<a name="line.199"></a>
<span class="sourceLineNo">200</span>                 *      3LB9.A  1HV1<a name="line.200"></a>
<span class="sourceLineNo">201</span>                 *      ------  ----<a name="line.201"></a>
<span class="sourceLineNo">202</span>                 *      0-62    122-184<a name="line.202"></a>
<span class="sourceLineNo">203</span>                 *      63              0<a name="line.203"></a>
<span class="sourceLineNo">204</span>                 *      65-181  1-117<a name="line.204"></a>
<span class="sourceLineNo">205</span>                 * <a name="line.205"></a>
<span class="sourceLineNo">206</span>                 * unaligned:<a name="line.206"></a>
<span class="sourceLineNo">207</span>                 *      64              -<a name="line.207"></a>
<span class="sourceLineNo">208</span>                 *      -               118-121<a name="line.208"></a>
<span class="sourceLineNo">209</span>                 * <a name="line.209"></a>
<span class="sourceLineNo">210</span>                 * PDB numbering:<a name="line.210"></a>
<span class="sourceLineNo">211</span>                 *      +2              +1<a name="line.211"></a>
<span class="sourceLineNo">212</span>                 *<a name="line.212"></a>
<span class="sourceLineNo">213</span>                 */<a name="line.213"></a>
<span class="sourceLineNo">214</span>                String name1, name2;<a name="line.214"></a>
<span class="sourceLineNo">215</span>                name1 = "3LB9.A";<a name="line.215"></a>
<span class="sourceLineNo">216</span>                name2 = "1HV1";<a name="line.216"></a>
<span class="sourceLineNo">217</span>                <a name="line.217"></a>
<span class="sourceLineNo">218</span>                CeCPMain ce = (CeCPMain) StructureAlignmentFactory.getAlgorithm(CeCPMain.algorithmName);<a name="line.218"></a>
<span class="sourceLineNo">219</span><a name="line.219"></a>
<span class="sourceLineNo">220</span>                Atom[] ca1 = cache.getAtoms(name1);<a name="line.220"></a>
<span class="sourceLineNo">221</span>                Atom[] ca2 = cache.getAtoms(name2);<a name="line.221"></a>
<span class="sourceLineNo">222</span>                <a name="line.222"></a>
<span class="sourceLineNo">223</span>                // Create permuted CA chain<a name="line.223"></a>
<span class="sourceLineNo">224</span>                Method permuteArray = OptimalCECPMain.class.getDeclaredMethod(<a name="line.224"></a>
<span class="sourceLineNo">225</span>                                "permuteArray", Object[].class, int.class);<a name="line.225"></a>
<span class="sourceLineNo">226</span>                permuteArray.setAccessible(true);<a name="line.226"></a>
<span class="sourceLineNo">227</span>                Atom[] ca2p = StructureTools.cloneCAArray(ca2);<a name="line.227"></a>
<span class="sourceLineNo">228</span>                permuteArray.invoke(null, ca2p, 63);<a name="line.228"></a>
<span class="sourceLineNo">229</span>                <a name="line.229"></a>
<span class="sourceLineNo">230</span>                AFPChain cpAlignment = ce.align(ca1, ca2);<a name="line.230"></a>
<span class="sourceLineNo">231</span>                //System.out.println(cpAlignment.toCE(ca1, ca2));<a name="line.231"></a>
<span class="sourceLineNo">232</span>                //printOptAln(cpAlignment);<a name="line.232"></a>
<span class="sourceLineNo">233</span>                <a name="line.233"></a>
<span class="sourceLineNo">234</span>                assertNotNull(cpAlignment);<a name="line.234"></a>
<span class="sourceLineNo">235</span>                <a name="line.235"></a>
<span class="sourceLineNo">236</span>                <a name="line.236"></a>
<span class="sourceLineNo">237</span>                int[] optLen = cpAlignment.getOptLen();<a name="line.237"></a>
<span class="sourceLineNo">238</span>                int[][][] optAln = cpAlignment.getOptAln();<a name="line.238"></a>
<span class="sourceLineNo">239</span>                <a name="line.239"></a>
<span class="sourceLineNo">240</span>                <a name="line.240"></a>
<span class="sourceLineNo">241</span>                assertEquals("Wrong total length",181,cpAlignment.getOptLength());<a name="line.241"></a>
<span class="sourceLineNo">242</span>                assertEquals("Wrong number of blocks",2, cpAlignment.getBlockNum());<a name="line.242"></a>
<span class="sourceLineNo">243</span>                assertEquals("Wrong block 0 length",63,optLen[0]);<a name="line.243"></a>
<span class="sourceLineNo">244</span>                assertEquals("Wrong block 1 length",118,optLen[1]);<a name="line.244"></a>
<span class="sourceLineNo">245</span><a name="line.245"></a>
<span class="sourceLineNo">246</span>                //just test some key positions in each block<a name="line.246"></a>
<span class="sourceLineNo">247</span>                assertEquals("Wrong residue at start of block 0, protein 0",0,optAln[0][0][0]);<a name="line.247"></a>
<span class="sourceLineNo">248</span>                assertEquals("Wrong residue at start of block 0, protein 1",122,optAln[0][1][0]);<a name="line.248"></a>
<span class="sourceLineNo">249</span>                assertEquals("Wrong residue at end of block 0, protein 0",62,optAln[0][0][62]);<a name="line.249"></a>
<span class="sourceLineNo">250</span>                assertEquals("Wrong residue at end of block 0, protein 1",184,optAln[0][1][62]);<a name="line.250"></a>
<span class="sourceLineNo">251</span><a name="line.251"></a>
<span class="sourceLineNo">252</span>                assertEquals("Wrong residue at start of block 1, protein 0",63,optAln[1][0][0]);<a name="line.252"></a>
<span class="sourceLineNo">253</span>                assertEquals("Wrong residue at start of block 1, protein 1",0,optAln[1][1][0]);<a name="line.253"></a>
<span class="sourceLineNo">254</span>                assertEquals("Wrong residue at pos 1 of block 1, protein 0",65,optAln[1][0][1]);<a name="line.254"></a>
<span class="sourceLineNo">255</span>                assertEquals("Wrong residue at pos 1 of block 1, protein 1",1,optAln[1][1][1]);<a name="line.255"></a>
<span class="sourceLineNo">256</span>                assertEquals("Wrong residue at pos 54 of block 1, protein 0",118,optAln[1][0][54]);<a name="line.256"></a>
<span class="sourceLineNo">257</span>                assertEquals("Wrong residue at pos 54 of block 1, protein 1",54,optAln[1][1][54]);<a name="line.257"></a>
<span class="sourceLineNo">258</span>                assertEquals("Wrong residue at pos 55 of block 1, protein 0",119,optAln[1][0][55]);<a name="line.258"></a>
<span class="sourceLineNo">259</span>                assertEquals("Wrong residue at pos 55 of block 1, protein 1",55,optAln[1][1][55]);<a name="line.259"></a>
<span class="sourceLineNo">260</span>                assertEquals("Wrong residue at end of block 1, protein 0",181,optAln[1][0][117]);<a name="line.260"></a>
<span class="sourceLineNo">261</span>                assertEquals("Wrong residue at end of block 1, protein 1",117,optAln[1][1][117]);<a name="line.261"></a>
<span class="sourceLineNo">262</span><a name="line.262"></a>
<span class="sourceLineNo">263</span>                <a name="line.263"></a>
<span class="sourceLineNo">264</span>                // permute! should align at 0,0<a name="line.264"></a>
<span class="sourceLineNo">265</span>                //System.out.println("Permuting by 63 residues...");<a name="line.265"></a>
<span class="sourceLineNo">266</span>                permuteOptAln.invoke(null, cpAlignment, 63);<a name="line.266"></a>
<span class="sourceLineNo">267</span>                //System.out.println(cpAlignment.toCE(ca1, ca2p));<a name="line.267"></a>
<span class="sourceLineNo">268</span>                //printOptAln(cpAlignment);<a name="line.268"></a>
<span class="sourceLineNo">269</span>                <a name="line.269"></a>
<span class="sourceLineNo">270</span>                optLen = cpAlignment.getOptLen();<a name="line.270"></a>
<span class="sourceLineNo">271</span>                optAln = cpAlignment.getOptAln();<a name="line.271"></a>
<span class="sourceLineNo">272</span>                <a name="line.272"></a>
<span class="sourceLineNo">273</span>                assertEquals("Wrong total length",181,cpAlignment.getOptLength());<a name="line.273"></a>
<span class="sourceLineNo">274</span>                assertEquals("Wrong number of blocks",2, cpAlignment.getBlockNum());<a name="line.274"></a>
<span class="sourceLineNo">275</span>                assertEquals("Wrong block 0 length",63,optLen[0]);<a name="line.275"></a>
<span class="sourceLineNo">276</span>                assertEquals("Wrong block 1 length",118,optLen[1]);             <a name="line.276"></a>
<span class="sourceLineNo">277</span><a name="line.277"></a>
<span class="sourceLineNo">278</span>                //just test some key positions in each block<a name="line.278"></a>
<span class="sourceLineNo">279</span>                assertEquals("Wrong residue at start of block 0, protein 0",0,optAln[0][0][0]);<a name="line.279"></a>
<span class="sourceLineNo">280</span>                assertEquals("Wrong residue at start of block 0, protein 1",0,optAln[0][1][0]);<a name="line.280"></a>
<span class="sourceLineNo">281</span>                assertEquals("Wrong residue at end of block 0, protein 0",62,optAln[0][0][62]);<a name="line.281"></a>
<span class="sourceLineNo">282</span>                assertEquals("Wrong residue at end of block 0, protein 1",62,optAln[0][1][62]);<a name="line.282"></a>
<span class="sourceLineNo">283</span><a name="line.283"></a>
<span class="sourceLineNo">284</span>                assertEquals("Wrong residue at start of block 1, protein 0",63,optAln[1][0][0]);<a name="line.284"></a>
<span class="sourceLineNo">285</span>                assertEquals("Wrong residue at start of block 1, protein 1",63,optAln[1][1][0]);<a name="line.285"></a>
<span class="sourceLineNo">286</span>                assertEquals("Wrong residue at pos 1 of block 1, protein 0",65,optAln[1][0][1]);<a name="line.286"></a>
<span class="sourceLineNo">287</span>                assertEquals("Wrong residue at pos 1 of block 1, protein 1",64,optAln[1][1][1]);<a name="line.287"></a>
<span class="sourceLineNo">288</span>                assertEquals("Wrong residue at end of block 1, protein 0",181,optAln[1][0][117]);<a name="line.288"></a>
<span class="sourceLineNo">289</span>                assertEquals("Wrong residue at end of block 1, protein 1",180,optAln[1][1][117]);<a name="line.289"></a>
<span class="sourceLineNo">290</span><a name="line.290"></a>
<span class="sourceLineNo">291</span>                <a name="line.291"></a>
<span class="sourceLineNo">292</span>                // undo permutation<a name="line.292"></a>
<span class="sourceLineNo">293</span>                //System.out.println("Permuting by -63 residues...");<a name="line.293"></a>
<span class="sourceLineNo">294</span>                permuteOptAln.invoke(null, cpAlignment, -63);<a name="line.294"></a>
<span class="sourceLineNo">295</span>                //System.out.println(cpAlignment.toCE(ca1, ca2));<a name="line.295"></a>
<span class="sourceLineNo">296</span>                //printOptAln(cpAlignment);<a name="line.296"></a>
<span class="sourceLineNo">297</span>                <a name="line.297"></a>
<span class="sourceLineNo">298</span>                optLen = cpAlignment.getOptLen();<a name="line.298"></a>
<span class="sourceLineNo">299</span>                optAln = cpAlignment.getOptAln();<a name="line.299"></a>
<span class="sourceLineNo">300</span>                <a name="line.300"></a>
<span class="sourceLineNo">301</span>                assertEquals("Wrong total length",181,cpAlignment.getOptLength());<a name="line.301"></a>
<span class="sourceLineNo">302</span>                assertEquals("Wrong number of blocks",2, cpAlignment.getBlockNum());<a name="line.302"></a>
<span class="sourceLineNo">303</span>                assertEquals("Wrong block 0 length",63,optLen[0]);<a name="line.303"></a>
<span class="sourceLineNo">304</span>                assertEquals("Wrong block 1 length",118,optLen[1]);<a name="line.304"></a>
<span class="sourceLineNo">305</span><a name="line.305"></a>
<span class="sourceLineNo">306</span>                //just test some key positions in each block<a name="line.306"></a>
<span class="sourceLineNo">307</span>                assertEquals("Wrong residue at start of block 0, protein 0",0,optAln[0][0][0]);<a name="line.307"></a>
<span class="sourceLineNo">308</span>                assertEquals("Wrong residue at start of block 0, protein 1",122,optAln[0][1][0]);<a name="line.308"></a>
<span class="sourceLineNo">309</span>                assertEquals("Wrong residue at end of block 0, protein 0",62,optAln[0][0][62]);<a name="line.309"></a>
<span class="sourceLineNo">310</span>                assertEquals("Wrong residue at end of block 0, protein 1",184,optAln[0][1][62]);<a name="line.310"></a>
<span class="sourceLineNo">311</span><a name="line.311"></a>
<span class="sourceLineNo">312</span>                assertEquals("Wrong residue at start of block 1, protein 0",63,optAln[1][0][0]);<a name="line.312"></a>
<span class="sourceLineNo">313</span>                assertEquals("Wrong residue at start of block 1, protein 1",0,optAln[1][1][0]);<a name="line.313"></a>
<span class="sourceLineNo">314</span>                assertEquals("Wrong residue at pos 1 of block 1, protein 0",65,optAln[1][0][1]);<a name="line.314"></a>
<span class="sourceLineNo">315</span>                assertEquals("Wrong residue at pos 1 of block 1, protein 1",1,optAln[1][1][1]);<a name="line.315"></a>
<span class="sourceLineNo">316</span>                assertEquals("Wrong residue at pos 54 of block 1, protein 0",118,optAln[1][0][54]);<a name="line.316"></a>
<span class="sourceLineNo">317</span>                assertEquals("Wrong residue at pos 54 of block 1, protein 1",54,optAln[1][1][54]);<a name="line.317"></a>
<span class="sourceLineNo">318</span>                assertEquals("Wrong residue at pos 55 of block 1, protein 0",119,optAln[1][0][55]);<a name="line.318"></a>
<span class="sourceLineNo">319</span>                assertEquals("Wrong residue at pos 55 of block 1, protein 1",55,optAln[1][1][55]);<a name="line.319"></a>
<span class="sourceLineNo">320</span>                assertEquals("Wrong residue at end of block 1, protein 0",181,optAln[1][0][117]);<a name="line.320"></a>
<span class="sourceLineNo">321</span>                assertEquals("Wrong residue at end of block 1, protein 1",117,optAln[1][1][117]);<a name="line.321"></a>
<span class="sourceLineNo">322</span><a name="line.322"></a>
<span class="sourceLineNo">323</span>        }<a name="line.323"></a>
<span class="sourceLineNo">324</span><a name="line.324"></a>
<span class="sourceLineNo">325</span>        /**<a name="line.325"></a>
<span class="sourceLineNo">326</span>         * Print an AFPChain manually for debugging<a name="line.326"></a>
<span class="sourceLineNo">327</span>         * @param cpAlignment<a name="line.327"></a>
<span class="sourceLineNo">328</span>         */<a name="line.328"></a>
<span class="sourceLineNo">329</span>        @SuppressWarnings("unused")<a name="line.329"></a>
<span class="sourceLineNo">330</span>        private static void printOptAln(AFPChain cpAlignment) {<a name="line.330"></a>
<span class="sourceLineNo">331</span>                int[] optLen = cpAlignment.getOptLen();<a name="line.331"></a>
<span class="sourceLineNo">332</span>                int[][][] optAln = cpAlignment.getOptAln();<a name="line.332"></a>
<span class="sourceLineNo">333</span>                <a name="line.333"></a>
<span class="sourceLineNo">334</span>                for(int block=0;block&lt;cpAlignment.getBlockNum();block++) {<a name="line.334"></a>
<span class="sourceLineNo">335</span>                        for(int pos=0;pos&lt;optLen[block]; pos++) {<a name="line.335"></a>
<span class="sourceLineNo">336</span>                                System.out.format("%s\t%s\n", optAln[block][0][pos],<a name="line.336"></a>
<span class="sourceLineNo">337</span>                                                optAln[block][1][pos]);<a name="line.337"></a>
<span class="sourceLineNo">338</span>                        }<a name="line.338"></a>
<span class="sourceLineNo">339</span>                        System.out.println();<a name="line.339"></a>
<span class="sourceLineNo">340</span>                }<a name="line.340"></a>
<span class="sourceLineNo">341</span>        }<a name="line.341"></a>
<span class="sourceLineNo">342</span>}<a name="line.342"></a>




























































</pre>
</div>
</body>
</html>
